chart:
  files:
  - data: IyBQYXR0ZXJucyB0byBpZ25vcmUgd2hlbiBidWlsZGluZyBwYWNrYWdlcy4KIyBUaGlzIHN1cHBvcnRzIHNoZWxsIGdsb2IgbWF0Y2hpbmcsIHJlbGF0aXZlIHBhdGggbWF0Y2hpbmcsIGFuZAojIG5lZ2F0aW9uIChwcmVmaXhlZCB3aXRoICEpLiBPbmx5IG9uZSBwYXR0ZXJuIHBlciBsaW5lLgouRFNfU3RvcmUKIyBDb21tb24gVkNTIGRpcnMKLmdpdC8KLmdpdGlnbm9yZQouYnpyLwouYnpyaWdub3JlCi5oZy8KLmhnaWdub3JlCi5zdm4vCiMgQ29tbW9uIGJhY2t1cCBmaWxlcwoqLnN3cAoqLmJhawoqLnRtcAoqfgojIFZhcmlvdXMgSURFcwoucHJvamVjdAouaWRlYS8KKi50bXByb2oK
    name: .helmignore
  - data: IyMgMi4wLjEtMCAtIDIwMjAtMDQtMTYKClRoZSBjaGFydHMgbm93IG9mZmljaWFsbHkgc3VwcG9ydCBLdWJlcm5ldGVzIDEuMTEgYW5kIG5ld2VyLgoKIyMjIENoYW5nZXMKKiBUaGUgVml0ZXNzVG9wb05vZGUgQ1JEIGlzIG5vdyBjcmVhdGVkIHVzaW5nIHRoZSBgYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjFiZXRhMWAgQVBJLgoKIyMgMi4wLjAtMCAtIDIwMjAtMDQtMDMKClZpdGVzcyBub3cgc3VwcG9ydHMgdXNpbmcgdGhlIEt1YmVybmV0ZXMgQVBJIGFzIGEgdG9wb2xvZ3kgcHJvdmlkZXIuIFRoaXMgbWVhbnMgdGhhdCBpdCBpcyBub3cgZWFzaWVyIHRoYW4gZXZlciB0byBydW4gVml0ZXNzIG9uIEt1YmVybmV0ZXMhIAoKUHJvcGVybHkgc3VwcG9ydGluZyB0aGlzIG5ldyBwcm92aWRlciByZXF1aXJlcyBhIG1ham9yLCBicmVha2luZyBjaGFuZ2Ugb2YgdGhlIGhlbG0gY2hhcnRzLiBUaGUgYGV0Y2Qtb3BlcmF0b3JgIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYXMgd2VsbCBzbyB0aGUgVml0ZXNzIHRlYW0gaGFzIGRlY2lkZWQgdG8gbWFrZSB0aGUgS3ViZXJuZXRlcyB0b3BvbG9neSB0aGUgZGVmYXVsdCBnb2luZyBmb3J3YXJkLgoKIyMjIFVwZ3JhZGUgYW5kIE1pZ3JhdGlvbiBJbmZvcm1hdGlvbgoKKiBUaGlzIHZlcnNpb24gaW50cm9kdWNlcyBhIGB0b3BvbG9neVByb3ZpZGVyYCBjb25maWd1cmF0aW9uIGluIGB0b3BvbG9neS5nbG9iYWxDZWxsYCBhbmQgaW4gdGhlIGNvbmZpZ3VyYXRpb24gZm9yIGVhY2ggY2VsbCBpbmRpdmlkdWFsbHkuIFRoZSBkZWZhdWx0IGZyb20gdjIgb24gaXMgdG8gdXNlIHRoZSBgazhzYCB0b3BvbG9neSBwcm92aWRlci4gRXhwbGljaXRseSBzZXQgdGhlc2UgdmFsdWVzIHRvIGBldGNkMmAgaW4gb3JkZXIgdG8gY29udGludWUgdG8gdXNlIHRoZSBldGNkIHRvcG9sb2d5IHByb3ZpZGVyLgoqIFRoZSBgcm9vdGAgaXMgbm93IGJlaW5nIHNldCBwcm9wZXJseSBmb3IgYWxsIHRvcG9sb2d5IGNlbGxzLiBQcmlvciB0byB0aGlzIHZlcnNpb24sIGFsbCBjZWxscyB3ZXJlIHVzaW5nIGAiImAgYXMgdGhlIHJvb3Qgd2hpY2ggd29ya2VkLCBidXQgd2FzIGludmFsaWQuIFRoZSByb290IHBhdGggZm9yIGFsbCBjZWxscyAgd2lsbCBub3cgYmUgc2V0IHRvIGAvdml0ZXNzL3t7ICRjZWxsLm5hbWUgfX1gLiBJbiBvcmRlciB0byB1cGdyYWRlIGEgaGVsbSBkZXBsb3ltZW50IGZyb20gdjEgdG8gdjIgeW91IHdpbGwgbmVlZCB0byBzdG9wIGFsbCB2aXRlc3MgY29tcG9uZW50cywgbWlncmF0ZSBhbGwgZXRjZCBrZXlzIGV4Y2VwdCBgL2dsb2JhbGAsIGZyb20gYC9gIHRvIGAvdml0ZXNzL3t7ICRjZWxsLm5hbWUgfX1gLiBUaGVyZSBpcyBubyBhdXRvbWF0aW9uIGZvciB0aGlzIHByb2NlZHVyZSBhdCB0aGlzIHRpbWUuCgojIyMgQ2hhbmdlcwoqIFVwZGF0ZSBpbWFnZXMgb2YgVml0ZXNzIGNvbXBvbmVudHMgdG8gKipUT0RPOiB3ZSBuZWVkIG5ldyBpbWFnZXMgYmFzZWQgb24gYSByZWxlYXNlZCB0YWcsIG5vdCBqdXN0IG1hc3RlciBhdCBhIHBvaW50IGluIHRpbWUqKgoqIFNldCB0aGUgdG9wb2xvZ3kgYHJvb3RgIGluIGFsbCBuZXcgYW5kIGV4aXN0aW5nIGNlbGxzIHRvIGAvdml0ZXNzL3t7ICRjZWxsLm5hbWUgfX1gCiogQWRkIGB0b3BvbG9neS5nbG9iYWxDZWxsLnRvcG9sb2d5UHJvdmlkZXJgIC0gZGVmYXVsdCB0byBgazhzYAoqIEFkZCBgdG9wb2xneS5jZWxsc1sqXS50b3BvbG9neVByb3ZpZGVyYCAtIGRlZmF1bHQgdG8gYGs4c2AKCiMjIDEuMC43LTUgLSAyMDE5LTEyLTAyCgojIyMgQ2hhbmdlcwoqIFVwZGF0ZSBpbWFnZXMgb2YgVml0ZXNzIGNvbXBvbmVudHMgdG8gdjQuMC4wCiogVXBkYXRlIE15U1FMIGltYWdlIHRvIFBlcmNvbmEgNS43LjI2CiogU3VwcG9ydCBmb3IgT3BlblRyYWNpbmcKCiMjIDEuMC42IC0gMjAxOS0wMS0yMAoKIyMjIENoYW5nZXMKKiBVcGRhdGUgT3JjaGVzdHJhdG9yIGRlZmF1bHQgdG8gMy4wLjE0CiogUnVuIGBwbW0tYWRtaW4gcmVwYWlyYCBvbiBgcG1tLWNsaWVudGAgc3RhcnR1cCB0byByZWNvdmVyIGZhaWx1cmVzIG9uIGBwbW0tc2VydmVyYAoqIEJhY2t1cHMgbm93IG9ubHkgcnVuIG9uIGByZXBsaWNhYCAobm9uLW1hc3RlciksIGByZG9ubHlgLCBvciBgc3BhcmVgIHRhYmxldCB0eXBlcwoKIyMgMS4wLjUgLSAyMDE5LTAxLTEyCgojIyMgQ2hhbmdlcwoqIFNldCBGYWlsTWFzdGVyUHJvbW90aW9uSWZTUUxUaHJlYWROb3RVcFRvRGF0ZSA9IHRydWUgaW4gT3JjaGVzdHJhdG9yIGNvbmZpZywgdG8gcHJldmVudApsYWdnaW5nIHJlcGxpY2FzIGZyb20gYmVpbmcgcHJvbW90ZWQgdG8gbWFzdGVyIGFuZCBjYXVzaW5nIGVycmFudCBHVElEIHByb2JsZW1zLgoKKipOT1RFOioqIFlvdSBuZWVkIHRvIG1hbnVhbGx5IHJlc3RhcnQgeW91ciBPcmNoZXN0cmF0b3IgcG9kcyBmb3IgdGhpcyBjaGFuZ2UgdG8gdGFrZSBlZmZlY3QKCiMjIDEuMC40IC0gMjAxOS0wMS0wMQoKIyMjIENoYW5nZXMKKiBVc2UgdGhlIFtPcmNoZXN0cmF0b3IgQVBJXShodHRwczovL2dpdGh1Yi5jb20vb3BlbmFyay9vcmNoZXN0cmF0b3IvYmxvYi9tYXN0ZXIvZG9jcy91c2luZy10aGUtd2ViLWFwaS5tZCkKdG8gY2FsbCBgYmVnaW4tZG93bnRpbWVgIGJlZm9yZSBydW5uaW5nIGBQbGFubmVkUmVwYXJlbnRTaGFyZGAgaW4gdGhlIGBwcmVTdG9wSG9va2AsIHRvIG1ha2Ugc3VyZSB0aGF0IE9yY2hlc3RyYXRvcgpkb2Vzbid0IHRyeSB0byBydW4gYW4gZXh0ZXJuYWwgZmFpbG92ZXIgd2hpbGUgVml0ZXNzIGlzIHJlcGFyZW50aW5nLiBXaGVuIGl0IGlzIGNvbXBsZXRlLCBpdCBjYWxscyBgZW5kLWRvd250aW1lYC4KQWxzbyBjYWxsIGBmb3JnZXRgIG9uIHRoZSBpbnN0YW5jZSBhZnRlciBjYWxsaW5nIGB2dGN0bGNsaWVudCBEZWxldGVUYWJsZXRgLiBJdCB3aWxsIGJlIHJlZGlzY292ZXJlZCBpZi93aGVuCnRoZSB0YWJsZXQgY29tZXMgYmFjayB1cC4gVGhpcyBlbGltaW5hdGVzIG1vc3QgcG9zc2libGUgcmFjZSBjb25kaXRpb25zIHRoYXQgY291bGQgY2F1c2Ugc3BsaXQgYnJhaW4uCgojIyAxLjAuMyAtIDIwMTgtMTItMjAKCiMjIyBDaGFuZ2VzCiogU3RhcnQgdGFnZ2luZyBoZWxtIGltYWdlcyBhbmQgdXNlIHRoZW0gYXMgZGVmYXVsdAoqIEFkZGVkIGNvbW1vbmx5IHVzZWQgZmxhZ3MgdG8gdmFsdWVzLnlhbWwgZm9yIHZ0Z2F0ZSAmIHZ0dGFibGV0IGZvciBkaXNjb3ZlcmFiaWxpdHkuClNvbWUgbWF0Y2ggdGhlIGJpbmFyeSBmbGFnIGRlZmF1bHRzLCBhbmQgc29tZSBoYXZlIGJlZW4gc2V0IHRvIG1vcmUgcHJvZHVjdGlvbiByZWFkeSB2YWx1ZXMuCiogRXh0ZW5kZWQgdnR0YWJsZXQgdGVybWluYXRpb25HcmFjZVBlcmlvZFNlY29uZHMgZnJvbSA2MDAgdG8gNjAwMDAwMDAuClRoaXMgd2lsbCBibG9jayBvbiBgUGxhbm5lZFJlcGFyZW50YCBpbiB0aGUgYHByZVN0b3BIb29rYCBmb3JldmVyIHRvIHByZXZlbnQKdW5zYWZlIGBFbWVyZ2VuY3lSZXBhcmVudGAgb3BlcmF0aW9ucyB3aGVuIHRoZSBwb2QgaXMga2lsbGVkLgoKIyMjIEJ1ZyBmaXhlcwoqIFVzZSBgJE1ZU1FMX0ZMQVZPUmAgdG8gc2V0IGZsYXZvciBpbnN0ZWFkIG9mIGAkRVhUUkFfTVlfQ05GYAoKIyMgMS4wLjIgLSAyMDE4LTEyLTExCgojIyMgQnVnIGZpeGVzCiogUmVuYW1lZCBJbWFnZVB1bGxQb2xpY3kgdG8gaW1hZ2VQdWxsUG9saWN5CiogQWRkZWQgdXNlci1zZWNyZXQtdm9sdW1lcyB0byBiYWNrdXAgQ3JvbkpvYgoKIyMgMS4wLjEgLSAyMDE4LTEyLTA3CgojIyMgQ2hhbmdlcwoqIEFkZGVkIHN1cHBvcnQgZm9yIFtNeVNRTCBDdXN0b20gUXVlcmllc10oaHR0cHM6Ly93d3cucGVyY29uYS5jb20vYmxvZy8yMDE4LzEwLzEwL3BlcmNvbmEtbW9uaXRvcmluZy1hbmQtbWFuYWdlbWVudC1wbW0tMS0xNS0wLWlzLW5vdy1hdmFpbGFibGUvKSBpbiBQTU0KKiBBZGRlZCBMaW51eCBob3N0IG1vbml0b3JpbmcgZm9yIFBNTQoqIEFkZGVkIGtleXNwYWNlIGFuZCBzaGFyZCBsYWJlbHMgdG8gam9icwoqIFJlbW92ZSBvbGQgbXlzcWwuc29jayBmaWxlIGluIHZ0dGFibGV0IEluaXRDb250YWluZXIKCiMjIyBCdWcgZml4ZXMKKiBQTU0gd291bGRuJ3QgYm9vdHN0cmFwIGNvcnJlY3RseSBvbiBhIG5ldyBjbHVzdGVyCgojIyAxLjAuMCAtIDIwMTgtMTItMDMgVml0ZXNzIEhlbG0gQ2hhcnQgZ29lcyBHQSEK
    name: CHANGELOG.md
  - data: 
    name: README.md
  - data: IyBUaGlzIGlzIGEgY29weSBvZiB0aGUgY3JkIGRlZiBmcm9tOiB2aXRlc3MvZ28vdnQvdG9wby9rOHN0b3BvL1ZpdGVzc1RvcG9Ob2Rlcy1jcmQueWFtbAojIEl0IGlzIG5vdCBzeW1saW5rZWQgc28gdGhhdCB0aGUgaGVsbSBjaGFydHMgZG8gbm90IGhhdmUgcmVmZXJlbmNlcyB0byBvdXRzaWRlIGZpbGVzCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCm1ldGFkYXRhOgogIG5hbWU6IHZpdGVzc3RvcG9ub2Rlcy50b3BvLnZpdGVzcy5pbwpzcGVjOgogIGdyb3VwOiB0b3BvLnZpdGVzcy5pbwogIGFkZGl0aW9uYWxQcmludGVyQ29sdW1uczoKICAgIC0gbmFtZTogS2V5CiAgICAgIHR5cGU6IHN0cmluZwogICAgICBkZXNjcmlwdGlvbjogVGhlIGZ1bGwga2V5IHBhdGgKICAgICAgSlNPTlBhdGg6IC5kYXRhLmtleQogIHZhbGlkYXRpb246CiAgICBvcGVuQVBJVjNTY2hlbWE6CiAgICAgIHR5cGU6IG9iamVjdAogICAgICByZXF1aXJlZDoKICAgICAgICAtIGRhdGEKICAgICAgcHJvcGVydGllczoKICAgICAgICBkYXRhOgogICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgLSBrZXkKICAgICAgICAgICAgLSB2YWx1ZQogICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAga2V5OgogICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBBIGZpbGUtcGF0aCBsaWtlIGtleS4gTXVzdCBiZSBhbiBhYnNvbHV0ZSBwYXRoLiBNdXN0IG5vdCBlbmQgd2l0aCBhIC8uCiAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgcGF0dGVybjogJ15cLy4rW15cL10kJwogICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogQSBiYXNlNjQgZW5jb2RlZCB2YWx1ZS4gTXVzdCBiZSBhIGJhc2U2NCBlbmNvZGVkIHN0cmluZyBvciBlbXB0eSBzdHJpbmcuCiAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgcGF0dGVybjogIl4oPzpbQS1aYS16MC05Ky9dezR9KSooPzpbQS1aYS16MC05Ky9dezJ9PT18W0EtWmEtejAtOSsvXXszfT0pPyQiCiAgICAgICAgICAgIGVwaGVtZXJhbDoKICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogV2hldGhlciBvciBub3QgdGhlIG5vZGUgaXMgY29uc2lkZXJlZCBlcGhlbWVyYWwuIFRydWUgZm9yIGxvY2sgYW5kIGVsZWN0aW9uIG5vZGVzLgogICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICB2ZXJzaW9uOiB2MWJldGExCiAgc2NvcGU6IE5hbWVzcGFjZWQKICBuYW1lczoKICAgIHBsdXJhbDogdml0ZXNzdG9wb25vZGVzCiAgICBzaW5ndWxhcjogdml0ZXNzdG9wb25vZGUKICAgIGtpbmQ6IFZpdGVzc1RvcG9Ob2RlCg==
    name: crds/VitessTopoNodes-crd.yaml
  - data: dG9wb2xvZ3k6CiAgY2VsbHM6CiAgICAtIG5hbWU6ICJ6b25lMSIKICAgICAgdnRjdGxkOgogICAgICAgIHJlcGxpY2FzOiAxCiAgICAgIHZ0Z2F0ZToKICAgICAgICByZXBsaWNhczogMQogICAgICBteXNxbFByb3RvY29sOgogICAgICAgIGVuYWJsZWQ6IHRydWUKICAgICAgICBhdXRoVHlwZTogIm5vbmUiCiAgICAgIGtleXNwYWNlczoKICAgICAgICAtIG5hbWU6ICJjb21tZXJjZSIKICAgICAgICAgIHNoYXJkczoKICAgICAgICAgICAgLSBuYW1lOiAiMCIKICAgICAgICAgICAgICB0YWJsZXRzOgogICAgICAgICAgICAgICAgLSB0eXBlOiAicmVwbGljYSIKICAgICAgICAgICAgICAgICAgdnR0YWJsZXQ6CiAgICAgICAgICAgICAgICAgICAgcmVwbGljYXM6IDIKICAgICAgICAgIHNjaGVtYToKICAgICAgICAgICAgcGhhc2UxOiB8LQogICAgICAgICAgICAgIGNyZWF0ZSB0YWJsZSBwcm9kdWN0KAogICAgICAgICAgICAgICAgc2t1IHZhcmJpbmFyeSgxMjgpLAogICAgICAgICAgICAgICAgZGVzY3JpcHRpb24gdmFyYmluYXJ5KDEyOCksCiAgICAgICAgICAgICAgICBwcmljZSBiaWdpbnQsCiAgICAgICAgICAgICAgICBwcmltYXJ5IGtleShza3UpCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBjcmVhdGUgdGFibGUgY3VzdG9tZXIoCiAgICAgICAgICAgICAgICB1c2VyX2lkIGJpZ2ludCBub3QgbnVsbCBhdXRvX2luY3JlbWVudCwKICAgICAgICAgICAgICAgIGVtYWlsIHZhcmJpbmFyeSgxMjgpLAogICAgICAgICAgICAgICAgcHJpbWFyeSBrZXkodXNlcl9pZCkKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIGNyZWF0ZSB0YWJsZSBjb3JkZXIoCiAgICAgICAgICAgICAgICBvcmRlcl9pZCBiaWdpbnQgbm90IG51bGwgYXV0b19pbmNyZW1lbnQsCiAgICAgICAgICAgICAgICB1c2VyX2lkIGJpZ2ludCwKICAgICAgICAgICAgICAgIHByb2R1Y3RfaWQgYmlnaW50LAogICAgICAgICAgICAgICAgbXNycCBiaWdpbnQsCiAgICAgICAgICAgICAgICBwcmltYXJ5IGtleShvcmRlcl9pZCkKICAgICAgICAgICAgICApOwogICAgICAgICAgdnNjaGVtYToKICAgICAgICAgICAgcGhhc2UxOiB8LQogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0YWJsZXMiOiB7CiAgICAgICAgICAgICAgICAgICJwcm9kdWN0Ijoge30sCiAgICAgICAgICAgICAgICAgICJjdXN0b21lciI6IHt9LAogICAgICAgICAgICAgICAgICAiY29yZGVyIjoge30KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9Cgp2dGN0bGQ6CiAgc2VydmljZVR5cGU6ICJOb2RlUG9ydCIKICByZXNvdXJjZXM6Cgp2dGdhdGU6CiAgc2VydmljZVR5cGU6ICJOb2RlUG9ydCIKICByZXNvdXJjZXM6Cgp2dHRhYmxldDoKICByZXNvdXJjZXM6CiAgbXlzcWxSZXNvdXJjZXM6CgpwbW06CiAgZW5hYmxlZDogZmFsc2UKCm9yY2hlc3RyYXRvcjoKICBlbmFibGVkOiBmYWxzZQo=
    name: examples/minikube.yaml
  lock: null
  metadata:
    apiVersion: v1
    description: Single-Chart Vitess Cluster
    home: https://vitess.io
    icon: https://vitess.io/img/logos/vitess.png
    keywords:
    - vitess
    - mysql
    - maria
    - mariadb
    - percona
    - sql
    - database
    - shard
    maintainers:
    - email: vitess@googlegroups.com
      name: Vitess Project
    name: vitess
    sources:
    - https://github.com/vitessio/vitess
    version: 2.0.1-0
  schema: null
  templates:
  - data: e3stICRjZWxsIDo9IChpbmRleCAuVmFsdWVzLnRvcG9sb2d5LmNlbGxzIDApLm5hbWUgLX19Cnt7LSAkcHJveHlVUkwgOj0gcHJpbnRmICJodHRwOi8vbG9jYWxob3N0OjgwMDEvYXBpL3YxL25hbWVzcGFjZXMvJXMiIC5SZWxlYXNlLk5hbWVzcGFjZSAtfX0KClJlbGVhc2UgbmFtZToge3suUmVsZWFzZS5OYW1lfX0KClRvIGFjY2VzcyBhZG1pbmlzdHJhdGl2ZSB3ZWIgcGFnZXMsIHN0YXJ0IGEgcHJveHkgd2l0aDoKICBrdWJlY3RsIHByb3h5IC0tcG9ydD04MDAxCgpUaGVuIHVzZSB0aGUgZm9sbG93aW5nIFVSTHM6CgogICAgICB2dGN0bGQ6IHt7JHByb3h5VVJMfX0vc2VydmljZXMvdnRjdGxkOndlYi9wcm94eS9hcHAvCiAgICAgIHZ0Z2F0ZToge3skcHJveHlVUkx9fS9zZXJ2aWNlcy92dGdhdGUte3skY2VsbH19OndlYi9wcm94eS8Ke3sgaWYgJC5WYWx1ZXMub3JjaGVzdHJhdG9yLmVuYWJsZWQgfX1vcmNoZXN0cmF0b3I6IHt7JHByb3h5VVJMfX0vc2VydmljZXMvb3JjaGVzdHJhdG9yOndlYi9wcm94eS97eyBlbmQgfX0Ke3sgaWYgJC5WYWx1ZXMucG1tLmVuYWJsZWQgfX0gICAgICAgICBwbW06IHt7JHByb3h5VVJMfX0vc2VydmljZXMvcG1tOndlYi9wcm94eS97eyBlbmQgfX0K
    name: templates/NOTES.txt
  - data: IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBiYWNrdXAgY3JvbgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwp7eyBkZWZpbmUgInZ0dGFibGV0LWJhY2t1cC1jcm9uIiAtfX0KIyBzZXQgdHVwbGUgdmFsdWVzIHRvIG1vcmUgcmVjb2duaXphYmxlIHZhcmlhYmxlcwp7ey0gJGNlbGxDbGVhbiA6PSBpbmRleCAuIDAgLX19Cnt7LSAka2V5c3BhY2VDbGVhbiA6PSBpbmRleCAuIDEgLX19Cnt7LSAkc2hhcmRDbGVhbiA6PSBpbmRleCAuIDIgLX19Cnt7LSAkc2hhcmROYW1lIDo9IGluZGV4IC4gMyAtfX0Ke3stICRrZXlzcGFjZSA6PSBpbmRleCAuIDQgLX19Cnt7LSAkc2hhcmQgOj0gaW5kZXggLiA1IC19fQp7ey0gJHZpdGVzc1RhZyA6PSBpbmRleCAuIDYgLX19Cnt7LSAkYmFja3VwIDo9IGluZGV4IC4gNyAtfX0Ke3stICRuYW1lc3BhY2UgOj0gaW5kZXggLiA4IC19fQp7ey0gJGRlZmF1bHRWdGN0bGNsaWVudCA6PSBpbmRleCAuIDkgfX0KCnt7IGlmICRiYWNrdXAuZW5hYmxlZCB9fQojIGNyZWF0ZSBjcm9uIGpvYiBmb3IgY3VycmVudCBzaGFyZAotLS0KYXBpVmVyc2lvbjogYmF0Y2gvdjFiZXRhMQpraW5kOiBDcm9uSm9iCm1ldGFkYXRhOgogIG5hbWU6IHt7ICRzaGFyZE5hbWUgfX0tYmFja3VwCiAgbGFiZWxzOgogICAgYXBwOiB2aXRlc3MKICAgIGNvbXBvbmVudDogdnR0YWJsZXQKICAgIGNlbGw6IHt7ICRjZWxsQ2xlYW4gfCBxdW90ZSB9fQogICAga2V5c3BhY2U6IHt7ICRrZXlzcGFjZUNsZWFuIHwgcXVvdGUgfX0KICAgIHNoYXJkOiB7eyAkc2hhcmRDbGVhbiB8IHF1b3RlIH19CiAgICBiYWNrdXBKb2I6ICJ0cnVlIgoKc3BlYzoKICBzY2hlZHVsZToge3sgJHNoYXJkLmJhY2t1cC5jcm9uLnNjaGVkdWxlIHwgZGVmYXVsdCAkYmFja3VwLmNyb24uc2NoZWR1bGUgfCBxdW90ZSB9fQogIGNvbmN1cnJlbmN5UG9saWN5OiBGb3JiaWQKICBzdXNwZW5kOiB7eyAkc2hhcmQuYmFja3VwLmNyb24uc3VzcGVuZCB8IGRlZmF1bHQgJGJhY2t1cC5jcm9uLnN1c3BlbmQgfX0KICBzdWNjZXNzZnVsSm9ic0hpc3RvcnlMaW1pdDogMwogIGZhaWxlZEpvYnNIaXN0b3J5TGltaXQ6IDIwCgogIGpvYlRlbXBsYXRlOgogICAgc3BlYzoKICAgICAgdGVtcGxhdGU6CiAgICAgICAgbWV0YWRhdGE6CiAgICAgICAgICBsYWJlbHM6CiAgICAgICAgICAgIGFwcDogdml0ZXNzCiAgICAgICAgICAgIGNvbXBvbmVudDogdnR0YWJsZXQKICAgICAgICAgICAgY2VsbDoge3sgJGNlbGxDbGVhbiB8IHF1b3RlIH19CiAgICAgICAgICAgIGtleXNwYWNlOiB7eyAka2V5c3BhY2VDbGVhbiB8IHF1b3RlIH19CiAgICAgICAgICAgIHNoYXJkOiB7eyAkc2hhcmRDbGVhbiB8IHF1b3RlIH19CiAgICAgICAgICAgIGJhY2t1cEpvYjogInRydWUiCgogICAgICAgICMgcG9kIHNwZWMKICAgICAgICBzcGVjOgogICAgICAgICAgcmVzdGFydFBvbGljeTogTmV2ZXIKe3sgaW5jbHVkZSAicG9kLXNlY3VyaXR5IiAuIHwgaW5kZW50IDEwIH19CgogICAgICAgICAgY29udGFpbmVyczoKICAgICAgICAgIC0gbmFtZTogYmFja3VwCiAgICAgICAgICAgIGltYWdlOiAidml0ZXNzL3Z0Y3RsY2xpZW50Ont7JHZpdGVzc1RhZ319IgogICAgICAgICAgICB2b2x1bWVNb3VudHM6Cnt7IGluY2x1ZGUgInVzZXItc2VjcmV0LXZvbHVtZU1vdW50cyIgJGRlZmF1bHRWdGN0bGNsaWVudC5zZWNyZXRzIHwgaW5kZW50IDE0IH19CgogICAgICAgICAgICBjb21tYW5kOiBbImJhc2giXQogICAgICAgICAgICBhcmdzOgogICAgICAgICAgICAgIC0gIi1jIgogICAgICAgICAgICAgIC0gfAogICAgICAgICAgICAgICAgc2V0IC1leAoKICAgICAgICAgICAgICAgIFZUQ1RMRF9TVkM9dnRjdGxkLnt7ICRuYW1lc3BhY2UgfX06MTU5OTkKICAgICAgICAgICAgICAgIFZUQ1RMX0VYVFJBX0ZMQUdTPSh7eyBpbmNsdWRlICJmb3JtYXQtZmxhZ3MtaW5saW5lIiAkZGVmYXVsdFZ0Y3RsY2xpZW50LmV4dHJhRmxhZ3MgfX0pCgogICAgICAgICAgICAgICAgdnRjdGxjbGllbnQgJHtWVENUTF9FWFRSQV9GTEFHU1tAXX0gLXNlcnZlciAkVlRDVExEX1NWQyBCYWNrdXBTaGFyZCB7eyAka2V5c3BhY2UubmFtZSB9fS97eyAkc2hhcmQubmFtZSB9fQoKICAgICAgICAgICAgcmVzb3VyY2VzOgogICAgICAgICAgICAgIHJlcXVlc3RzOgogICAgICAgICAgICAgICAgY3B1OiAxMG0KICAgICAgICAgICAgICAgIG1lbW9yeTogMjBNaQogICAgICAgICAgdm9sdW1lczoKe3sgaW5jbHVkZSAidXNlci1zZWNyZXQtdm9sdW1lcyIgJGRlZmF1bHRWdGN0bGNsaWVudC5zZWNyZXRzIHwgaW5kZW50IDEyIH19Cgp7eyBlbmQgfX0KCnt7LSBlbmQgLX19Cg==
    name: templates/_cron-jobs.tpl
  - data: IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBldGNkIGNsdXN0ZXIgbWFuYWdlZCBieSBwcmUtaW5zdGFsbGVkIGV0Y2Qgb3BlcmF0b3IKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKe3sgZGVmaW5lICJldGNkIiAtfX0KIyBzZXQgdHVwbGUgdmFsdWVzIHRvIG1vcmUgcmVjb2duaXphYmxlIHZhcmlhYmxlcwp7ey0gJG5hbWUgOj0gaW5kZXggLiAwIC19fQp7ey0gJHJlcGxpY2FzIDo9IGluZGV4IC4gMSAtfX0Ke3stICR2ZXJzaW9uIDo9IGluZGV4IC4gMiAtfX0Ke3stICRyZXNvdXJjZXMgOj0gaW5kZXggLiAzIH19Cnt7LSAkY2x1c3RlcldpZGUgOj0gaW5kZXggLiA0IH19CgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIEV0Y2RDbHVzdGVyCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCmFwaVZlcnNpb246ICJldGNkLmRhdGFiYXNlLmNvcmVvcy5jb20vdjFiZXRhMiIKa2luZDogIkV0Y2RDbHVzdGVyIgptZXRhZGF0YToKICBuYW1lOiAiZXRjZC17eyAkbmFtZSB9fSIKICAjIyBBZGRpbmcgdGhpcyBhbm5vdGF0aW9uIG1ha2UgdGhpcyBjbHVzdGVyIG1hbmFnZWQgYnkgY2x1c3RlcndpZGUgb3BlcmF0b3JzCiAgIyMgbmFtZXNwYWNlZCBvcGVyYXRvcnMgaWdub3JlIGl0CiAgYW5ub3RhdGlvbnM6CiAge3sgaWYgJGNsdXN0ZXJXaWRlIH19CiAgICBldGNkLmRhdGFiYXNlLmNvcmVvcy5jb20vc2NvcGU6IGNsdXN0ZXJ3aWRlCiAge3sgZW5kIH19CnNwZWM6CiAgc2l6ZToge3sgJHJlcGxpY2FzIH19CiAgdmVyc2lvbjoge3sgJHZlcnNpb24gfCBxdW90ZSB9fQogIHBvZDoKICAgIHJlc291cmNlczoKe3sgdG9ZYW1sICgkcmVzb3VyY2VzKSB8IGluZGVudCA2IH19CiAgICBhZmZpbml0eToKICAgICAgcG9kQW50aUFmZmluaXR5OgogICAgICAgIHByZWZlcnJlZER1cmluZ1NjaGVkdWxpbmdJZ25vcmVkRHVyaW5nRXhlY3V0aW9uOgogICAgICAgICMgcHJlZmVyIHRvIHN0YXkgYXdheSBmcm9tIG90aGVyIHNhbWUtY2VsbCBldGNkIHBvZHMKICAgICAgICAtIHdlaWdodDogMTAwCiAgICAgICAgICBwb2RBZmZpbml0eVRlcm06CiAgICAgICAgICAgIHRvcG9sb2d5S2V5OiBrdWJlcm5ldGVzLmlvL2hvc3RuYW1lCiAgICAgICAgICAgIGxhYmVsU2VsZWN0b3I6CiAgICAgICAgICAgICAgbWF0Y2hMYWJlbHM6CiAgICAgICAgICAgICAgICBldGNkX2NsdXN0ZXI6ICJldGNkLXt7ICRuYW1lIH19Igp7ey0gZW5kIC19fQo=
    name: templates/_etcd.tpl
  - data: IyBIZWxwZXIgdGVtcGxhdGVzCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIEZvcm1hdCBhIGZsYWcgbWFwIGludG8gYSBjb21tYW5kIGxpbmUsCiMgYXMgZXhwZWN0ZWQgYnkgdGhlIGdvbGFuZyAnZmxhZycgcGFja2FnZS4KIyBCb29sZWFuIGZsYWdzIG11c3QgYmUgZ2l2ZW4gYSB2YWx1ZSwgc3VjaCBhcyAidHJ1ZSIgb3IgImZhbHNlIi4KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKe3stIGRlZmluZSAiZm9ybWF0LWZsYWdzIiAtfX0Ke3stIHJhbmdlICRrZXksICR2YWx1ZSA6PSAuIC19fQote3ska2V5fX09e3skdmFsdWUgfCBxdW90ZX19Cnt7ZW5kIC19fQp7ey0gZW5kIC19fQoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIEZvcm1hdCBhIGZsYWcgbWFwIGludG8gYSBjb21tYW5kIGxpbmUgKGlubGluZSksCiMgYXMgZXhwZWN0ZWQgYnkgdGhlIGdvbGFuZyAnZmxhZycgcGFja2FnZS4KIyBCb29sZWFuIGZsYWdzIG11c3QgYmUgZ2l2ZW4gYSB2YWx1ZSwgc3VjaCBhcyAidHJ1ZSIgb3IgImZhbHNlIi4KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKe3stIGRlZmluZSAiZm9ybWF0LWZsYWdzLWlubGluZSIgLX19Cnt7LSByYW5nZSAka2V5LCAkdmFsdWUgOj0gLiAtfX0KLXt7JGtleX19PXt7JHZhbHVlIHwgcXVvdGV9fXt7IiAifX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0KCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgUmVwZWF0IGEgc3RyaW5nIE4gdGltZXMsIHdoZXJlIE4gaXMgdGhlIHRvdGFsIG51bWJlcgojIG9mIHJlcGxpY2FzLiBMZW4gbXVzdCBiZSB1c2VkIG9uIHRoZSBjYWxsaW5nIGVuZCB0bwojIGdldCBhbiBpbnQKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKe3stIGRlZmluZSAidGFibGV0LWNvdW50IiAtfX0Ke3stIHJhbmdlIC4gLX19Cnt7LSByZXBlYXQgKGludCAudnR0YWJsZXQucmVwbGljYXMpICJ4IiAtfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0KCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgRm9ybWF0IGEgbGlzdCBvZiBmbGFnIG1hcHMgaW50byBhIGNvbW1hbmQgbGluZS4KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKe3stIGRlZmluZSAiZm9ybWF0LWZsYWdzLWFsbCIgLX19Cnt7LSByYW5nZSAuIH19e3t0ZW1wbGF0ZSAiZm9ybWF0LWZsYWdzIiAufX17e2VuZCAtfX0Ke3stIGVuZCAtfX0KCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgQ2xlYW4gbGFiZWxzLCBtYWtpbmcgc3VyZSBpdCBzdGFydHMgYW5kIGVuZHMgd2l0aCBbQS1aYS16MC05XS4KIyBUaGlzIGlzIGVzcGVjaWFsbHkgaW1wb3J0YW50IGZvciBzaGFyZCBuYW1lcywgd2hpY2ggY2FuIHN0YXJ0IG9yIGVuZCB3aXRoCiMgJy0nIChsaWtlIC04MCBvciA4MC0pLCB3aGljaCB3b3VsZCBiZSBhbiBpbnZhbGlkIGt1YmVybmV0ZXMgbGFiZWwuCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCnt7LSBkZWZpbmUgImNsZWFuLWxhYmVsIiAtfX0Ke3stICRyZXBsYWNlZF9sYWJlbCA6PSAuIHwgcmVwbGFjZSAiXyIgIi0ifX0Ke3stIGlmIGhhc1ByZWZpeCAiLSIgLiAtfX0KeHt7JHJlcGxhY2VkX2xhYmVsfX0Ke3stIGVsc2UgaWYgaGFzU3VmZml4ICItIiAuIC19fQp7eyRyZXBsYWNlZF9sYWJlbH19eAp7ey0gZWxzZSAtfX0Ke3skcmVwbGFjZWRfbGFiZWx9fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBpbmplY3RzIGRlZmF1bHQgdml0ZXNzIGVudmlyb25tZW50IHZhcmlhYmxlcwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwp7ey0gZGVmaW5lICJ2aXRlc3MtZW52IiAtfX0KLSBuYW1lOiBWVFJPT1QKICB2YWx1ZTogIi92dCIKLSBuYW1lOiBWVERBVEFST09UCiAgdmFsdWU6ICIvdnRkYXRhcm9vdCIKLSBuYW1lOiBHT0JJTgogIHZhbHVlOiAiL3Z0L2JpbiIKLSBuYW1lOiBWVF9NWVNRTF9ST09UCiAgdmFsdWU6ICIvdXNyIgotIG5hbWU6IFBLR19DT05GSUdfUEFUSAogIHZhbHVlOiAiL3Z0L2xpYiIKe3stIGVuZCAtfX0KCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgaW5qZWN0IGRlZmF1bHQgcG9kIHNlY3VyaXR5CiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCnt7LSBkZWZpbmUgInBvZC1zZWN1cml0eSIgLX19CnNlY3VyaXR5Q29udGV4dDoKICBydW5Bc1VzZXI6IDEwMDAKICBmc0dyb3VwOiAyMDAwCnt7LSBlbmQgLX19CgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIHN1cHBvcnQgcmVnaW9uIG5vZGVBZmZpbml0eSBpZiBkZWZpbmVkCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCnt7LSBkZWZpbmUgIm5vZGUtYWZmaW5pdHkiIC19fQp7ey0gJHJlZ2lvbiA6PSAuIC19fQp7eyB3aXRoICRyZWdpb24gfX0Kbm9kZUFmZmluaXR5OgogIHJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICBub2RlU2VsZWN0b3JUZXJtczoKICAgIC0gbWF0Y2hFeHByZXNzaW9uczoKICAgICAgLSBrZXk6ICJmYWlsdXJlLWRvbWFpbi5iZXRhLmt1YmVybmV0ZXMuaW8vcmVnaW9uIgogICAgICAgIG9wZXJhdG9yOiBJbgogICAgICAgIHZhbHVlczogW3t7ICRyZWdpb24gfCBxdW90ZSB9fV0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0KCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgbXljbmYgZXhlYyAtIGV4cGVjdHMgZXh0cmFNeUNuZiBjb25maWcgbWFwIG5hbWUKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKe3stIGRlZmluZSAibXljbmYtZXhlYyIgLX19CgppZiBbICIkVlRfREJfRkxBVk9SIiA9ICJwZXJjb25hIiBdOyB0aGVuCiAgTVlTUUxfRkxBVk9SPVBlcmNvbmEKCmVsaWYgWyAiJFZUX0RCX0ZMQVZPUiIgPSAibXlzcWwiIF07IHRoZW4KICBNWVNRTF9GTEFWT1I9TXlTUUw1NgoKZWxpZiBbICIkVlRfREJfRkxBVk9SIiA9ICJteXNxbDU2IiBdOyB0aGVuCiAgTVlTUUxfRkxBVk9SPU15U1FMNTYKCmVsaWYgWyAiJFZUX0RCX0ZMQVZPUiIgPSAibWFyaWEiIF07IHRoZW4KICBNWVNRTF9GTEFWT1I9TWFyaWFEQgoKZWxpZiBbICIkVlRfREJfRkxBVk9SIiA9ICJtYXJpYWRiIiBdOyB0aGVuCiAgTVlTUUxfRkxBVk9SPU1hcmlhREIKCmVsaWYgWyAiJFZUX0RCX0ZMQVZPUiIgPSAibWFyaWFkYjEwMyIgXTsgdGhlbgogIE1ZU1FMX0ZMQVZPUj1NYXJpYURCMTAzCgpmaQoKZXhwb3J0IE1ZU1FMX0ZMQVZPUgoKe3sgaWYgLiB9fQpmb3IgZmlsZW5hbWUgaW4gL3Z0L3VzZXJjb25maWcvKi5jbmY7IGRvCiAgZXhwb3J0IEVYVFJBX01ZX0NORj0iJEVYVFJBX01ZX0NORjokZmlsZW5hbWUiCmRvbmUKe3sgZW5kIH19Cgp7ey0gZW5kIC19fQoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIwojIGFsbCBiYWNrdXAgaGVscGVycyBiZWxvdwojCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIGJhY2t1cCBmbGFncyAtIGV4cGVjdHMgY29uZmlnLmJhY2t1cAojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwp7ey0gZGVmaW5lICJiYWNrdXAtZmxhZ3MiIC19fQp7ey0gJGJhY2t1cCA6PSBpbmRleCAuIDAgLX19Cnt7LSAkY2FsbGVyIDo9IGluZGV4IC4gMSAtfX0KCnt7IHdpdGggJGJhY2t1cCB9fQoKICB7eyBpZiAuZW5hYmxlZCB9fQogICAge3sgaWYgZXEgJGNhbGxlciAidnR0YWJsZXQiIH19Ci1yZXN0b3JlX2Zyb21fYmFja3VwCiAgICB7eyBlbmQgfX0KCi1iYWNrdXBfc3RvcmFnZV9pbXBsZW1lbnRhdGlvbj0kVlRfQkFDS1VQX1NFUlZJQ0UKCiAgICB7eyBpZiBlcSAuYmFja3VwX3N0b3JhZ2VfaW1wbGVtZW50YXRpb24gImdjcyIgfX0KLWdjc19iYWNrdXBfc3RvcmFnZV9idWNrZXQ9JFZUX0dDU19CQUNLVVBfU1RPUkFHRV9CVUNLRVQKLWdjc19iYWNrdXBfc3RvcmFnZV9yb290PSRWVF9HQ1NfQkFDS1VQX1NUT1JBR0VfUk9PVAoKICAgIHt7IGVsc2UgaWYgZXEgLmJhY2t1cF9zdG9yYWdlX2ltcGxlbWVudGF0aW9uICJzMyIgfX0KLXMzX2JhY2t1cF9hd3NfcmVnaW9uPSRWVF9TM19CQUNLVVBfQVdTX1JFR0lPTgotczNfYmFja3VwX3N0b3JhZ2VfYnVja2V0PSRWVF9TM19CQUNLVVBfU1RPUkFHRV9CVUNLRVQKLXMzX2JhY2t1cF9zdG9yYWdlX3Jvb3Q9JFZUX1MzX0JBQ0tVUF9TVE9SQUdFX1JPT1QKLXMzX2JhY2t1cF9zZXJ2ZXJfc2lkZV9lbmNyeXB0aW9uPSRWVF9TM19CQUNLVVBfU0VSVkVSX1NJREVfRU5DUllQVElPTgoKICAgIHt7IGVsc2UgaWYgZXEgLmJhY2t1cF9zdG9yYWdlX2ltcGxlbWVudGF0aW9uICJjZXBoIiB9fQotY2VwaF9iYWNrdXBfc3RvcmFnZV9jb25maWc9JENFUEhfQ1JFREVOVElBTFNfRklMRQogICAge3sgZW5kIH19CgogIHt7IGVuZCB9fQoKe3sgZW5kIH19Cgp7ey0gZW5kIC19fQoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBiYWNrdXAgZW52IC0gZXhwZWN0cyBjb25maWcuYmFja3VwCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCnt7LSBkZWZpbmUgImJhY2t1cC1lbnYiIC19fQoKe3sgaWYgLmVuYWJsZWQgfX0KCi0gbmFtZTogVlRfQkFDS1VQX1NFUlZJQ0UKICB2YWx1ZUZyb206CiAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgIG5hbWU6IHZpdGVzcy1jbQogICAgICBrZXk6IGJhY2t1cC5iYWNrdXBfc3RvcmFnZV9pbXBsZW1lbnRhdGlvbgoKe3sgaWYgZXEgLmJhY2t1cF9zdG9yYWdlX2ltcGxlbWVudGF0aW9uICJnY3MiIH19CgotIG5hbWU6IFZUX0dDU19CQUNLVVBfU1RPUkFHRV9CVUNLRVQKICB2YWx1ZUZyb206CiAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgIG5hbWU6IHZpdGVzcy1jbQogICAgICBrZXk6IGJhY2t1cC5nY3NfYmFja3VwX3N0b3JhZ2VfYnVja2V0Ci0gbmFtZTogVlRfR0NTX0JBQ0tVUF9TVE9SQUdFX1JPT1QKICB2YWx1ZUZyb206CiAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgIG5hbWU6IHZpdGVzcy1jbQogICAgICBrZXk6IGJhY2t1cC5nY3NfYmFja3VwX3N0b3JhZ2Vfcm9vdAoKe3sgZWxzZSBpZiBlcSAuYmFja3VwX3N0b3JhZ2VfaW1wbGVtZW50YXRpb24gInMzIiB9fQoKLSBuYW1lOiBWVF9TM19CQUNLVVBfQVdTX1JFR0lPTgogIHZhbHVlRnJvbToKICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgbmFtZTogdml0ZXNzLWNtCiAgICAgIGtleTogYmFja3VwLnMzX2JhY2t1cF9hd3NfcmVnaW9uCi0gbmFtZTogVlRfUzNfQkFDS1VQX1NUT1JBR0VfQlVDS0VUCiAgdmFsdWVGcm9tOgogICAgY29uZmlnTWFwS2V5UmVmOgogICAgICBuYW1lOiB2aXRlc3MtY20KICAgICAga2V5OiBiYWNrdXAuczNfYmFja3VwX3N0b3JhZ2VfYnVja2V0Ci0gbmFtZTogVlRfUzNfQkFDS1VQX1NUT1JBR0VfUk9PVAogIHZhbHVlRnJvbToKICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgbmFtZTogdml0ZXNzLWNtCiAgICAgIGtleTogYmFja3VwLnMzX2JhY2t1cF9zdG9yYWdlX3Jvb3QKLSBuYW1lOiBWVF9TM19CQUNLVVBfU0VSVkVSX1NJREVfRU5DUllQVElPTgogIHZhbHVlRnJvbToKICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgbmFtZTogdml0ZXNzLWNtCiAgICAgIGtleTogYmFja3VwLnMzX2JhY2t1cF9zZXJ2ZXJfc2lkZV9lbmNyeXB0aW9uCgp7eyBlbmQgfX0KCnt7IGVuZCB9fQoKe3stIGVuZCAtfX0KCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgYmFja3VwIHZvbHVtZSAtIGV4cGVjdHMgY29uZmlnLmJhY2t1cAojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwp7ey0gZGVmaW5lICJiYWNrdXAtdm9sdW1lIiAtfX0KCnt7IGlmIC5lbmFibGVkIH19CgogIHt7IGlmIGVxIC5iYWNrdXBfc3RvcmFnZV9pbXBsZW1lbnRhdGlvbiAiZ2NzIiB9fQoKICAgIHt7IGlmIC5nY3NTZWNyZXQgfX0KLSBuYW1lOiBiYWNrdXAtY3JlZHMKICBzZWNyZXQ6CiAgICBzZWNyZXROYW1lOiB7eyAuZ2NzU2VjcmV0IH19CiAgICB7eyBlbmQgfX0KCiAge3sgZWxzZSBpZiBlcSAuYmFja3VwX3N0b3JhZ2VfaW1wbGVtZW50YXRpb24gInMzIiB9fQoKICAgIHt7IGlmIC5zM1NlY3JldCB9fQotIG5hbWU6IGJhY2t1cC1jcmVkcwogIHNlY3JldDoKICAgIHNlY3JldE5hbWU6IHt7IC5zM1NlY3JldCB9fQogICAge3sgZW5kIH19CgogIHt7IGVsc2UgaWYgZXEgLmJhY2t1cF9zdG9yYWdlX2ltcGxlbWVudGF0aW9uICJjZXBoIiB9fQoKLSBuYW1lOiBiYWNrdXAtY3JlZHMKICBzZWNyZXQ6CiAgICBzZWNyZXROYW1lOiB7e3JlcXVpcmVkICIuY2VwaFNlY3JldCBuZWNlc3NhcnkgdG8gdXNlIGJhY2t1cF9zdG9yYWdlX2ltcGxlbWVudGF0aW9uOiBjZXBoISIgLmNlcGhTZWNyZXQgfX0KCiAge3sgZW5kIH19Cgp7eyBlbmQgfX0KCnt7LSBlbmQgLX19CgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIGJhY2t1cCB2b2x1bWVNb3VudCAtIGV4cGVjdHMgY29uZmlnLmJhY2t1cAojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwp7ey0gZGVmaW5lICJiYWNrdXAtdm9sdW1lTW91bnQiIC19fQoKe3sgaWYgLmVuYWJsZWQgfX0KCiAge3sgaWYgZXEgLmJhY2t1cF9zdG9yYWdlX2ltcGxlbWVudGF0aW9uICJnY3MiIH19CgogICAge3sgaWYgLmdjc1NlY3JldCB9fQotIG5hbWU6IGJhY2t1cC1jcmVkcwogIG1vdW50UGF0aDogL2V0Yy9zZWNyZXRzL2NyZWRzCiAgICB7eyBlbmQgfX0KCiAge3sgZWxzZSBpZiBlcSAuYmFja3VwX3N0b3JhZ2VfaW1wbGVtZW50YXRpb24gInMzIiB9fQoKICAgIHt7IGlmIC5zM1NlY3JldCB9fQotIG5hbWU6IGJhY2t1cC1jcmVkcwogIG1vdW50UGF0aDogL2V0Yy9zZWNyZXRzL2NyZWRzCiAgICB7eyBlbmQgfX0KCiAge3sgZWxzZSBpZiBlcSAuYmFja3VwX3N0b3JhZ2VfaW1wbGVtZW50YXRpb24gImNlcGgiIH19CgotIG5hbWU6IGJhY2t1cC1jcmVkcwogIG1vdW50UGF0aDogL2V0Yy9zZWNyZXRzL2NyZWRzCgogIHt7IGVuZCB9fQoKe3sgZW5kIH19Cgp7ey0gZW5kIC19fQoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBiYWNrdXAgZXhlYwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwp7ey0gZGVmaW5lICJiYWNrdXAtZXhlYyIgLX19Cgp7eyBpZiAuZW5hYmxlZCB9fQoKICB7eyBpZiBlcSAuYmFja3VwX3N0b3JhZ2VfaW1wbGVtZW50YXRpb24gImdjcyIgfX0KCiAgICB7eyBpZiAuZ2NzU2VjcmV0IH19CmNyZWRzUGF0aD0vZXRjL3NlY3JldHMvY3JlZHMvJChscyAvZXRjL3NlY3JldHMvY3JlZHMvIHwgaGVhZCAtMSkKCmV4cG9ydCBHT09HTEVfQVBQTElDQVRJT05fQ1JFREVOVElBTFM9JGNyZWRzUGF0aApjYXQgJEdPT0dMRV9BUFBMSUNBVElPTl9DUkVERU5USUFMUwogICAge3sgZW5kIH19CgogIHt7IGVsc2UgaWYgZXEgLmJhY2t1cF9zdG9yYWdlX2ltcGxlbWVudGF0aW9uICJzMyIgfX0KCiAgICB7eyBpZiAuczNTZWNyZXQgfX0KY3JlZHNQYXRoPS9ldGMvc2VjcmV0cy9jcmVkcy8kKGxzIC9ldGMvc2VjcmV0cy9jcmVkcy8gfCBoZWFkIC0xKQoKZXhwb3J0IEFXU19TSEFSRURfQ1JFREVOVElBTFNfRklMRT0kY3JlZHNQYXRoCmNhdCAkQVdTX1NIQVJFRF9DUkVERU5USUFMU19GSUxFCiAgICB7eyBlbmQgfX0KCiAge3sgZWxzZSBpZiBlcSAuYmFja3VwX3N0b3JhZ2VfaW1wbGVtZW50YXRpb24gImNlcGgiIH19CgpjcmVkc1BhdGg9L2V0Yy9zZWNyZXRzL2NyZWRzLyQobHMgL2V0Yy9zZWNyZXRzL2NyZWRzLyB8IGhlYWQgLTEpCmV4cG9ydCBDRVBIX0NSRURFTlRJQUxTX0ZJTEU9JGNyZWRzUGF0aApjYXQgJENFUEhfQ1JFREVOVElBTFNfRklMRQoKICB7eyBlbmQgfX0KCnt7IGVuZCB9fQoKe3stIGVuZCAtfX0KCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgdXNlciBjb25maWcgdm9sdW1lIC0gZXhwZWN0cyBjb25maWcgbWFwIG5hbWUKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKe3stIGRlZmluZSAidXNlci1jb25maWctdm9sdW1lIiAtfX0KCnt7IGlmIC4gfX0KCi0gbmFtZTogdXNlci1jb25maWcKICBjb25maWdNYXA6CiAgICBuYW1lOiB7eyAuIH19Cgp7eyBlbmQgfX0KCnt7LSBlbmQgLX19CgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIHVzZXIgY29uZmlnIHZvbHVtZU1vdW50IC0gZXhwZWN0cyBjb25maWcgbWFwIG5hbWUKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKe3stIGRlZmluZSAidXNlci1jb25maWctdm9sdW1lTW91bnQiIC19fQoKe3sgaWYgLiB9fQoKLSBuYW1lOiB1c2VyLWNvbmZpZwogIG1vdW50UGF0aDogL3Z0L3VzZXJjb25maWcKCnt7IGVuZCB9fQoKe3stIGVuZCAtfX0KCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgdXNlciBzZWNyZXQgdm9sdW1lcyAtIGV4cGVjdHMgbGlzdCBvZiBzZWNyZXQgbmFtZXMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKe3stIGRlZmluZSAidXNlci1zZWNyZXQtdm9sdW1lcyIgLX19Cgp7eyBpZiAuIH19Cnt7LSByYW5nZSAuIH19Ci0gbmFtZTogdXNlci1zZWNyZXQte3sgLiB9fQogIHNlY3JldDoKICAgIHNlY3JldE5hbWU6IHt7IC4gfX0Ke3stIGVuZCB9fQp7eyBlbmQgfX0KCnt7LSBlbmQgLX19CgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIHVzZXIgc2VjcmV0IHZvbHVtZU1vdW50cyAtIGV4cGVjdHMgbGlzdCBvZiBzZWNyZXQgbmFtZXMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKe3stIGRlZmluZSAidXNlci1zZWNyZXQtdm9sdW1lTW91bnRzIiAtfX0KCnt7IGlmIC4gfX0Ke3stIHJhbmdlIC4gfX0KLSBuYW1lOiB1c2VyLXNlY3JldC17eyAuIH19CiAgbW91bnRQYXRoOiAvdnQvdXNlcnNlY3JldHMve3sgLiB9fQp7ey0gZW5kIH19Cnt7IGVuZCB9fQoKe3stIGVuZCAtfX0K
    name: templates/_helpers.tpl
  - data: IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBrZXlzcGFjZSBpbml0aWFsaXphdGlvbnMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCnt7LSBkZWZpbmUgInZ0Y3RsY2xpZW50LWpvYiIgLX19Cnt7LSAkam9iIDo9IGluZGV4IC4gMCAtfX0Ke3stICRkZWZhdWx0VnRjdGxjbGllbnQgOj0gaW5kZXggLiAxIC19fQp7ey0gJG5hbWVzcGFjZSA6PSBpbmRleCAuIDIgLX19Cgp7ey0gJHZpdGVzc1RhZyA6PSAkam9iLnZpdGVzc1RhZyB8IGRlZmF1bHQgJGRlZmF1bHRWdGN0bGNsaWVudC52aXRlc3NUYWcgLX19Cnt7LSAkc2VjcmV0cyA6PSAkam9iLnNlY3JldHMgfCBkZWZhdWx0ICRkZWZhdWx0VnRjdGxjbGllbnQuc2VjcmV0cyB9fQotLS0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBWaXRlc3MgdnRjdGxjbGllbnQgSm9iCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCmFwaVZlcnNpb246IGJhdGNoL3YxCmtpbmQ6IEpvYgptZXRhZGF0YToKICBuYW1lOiB2dGN0bGNsaWVudC17eyAkam9iLm5hbWUgfX0Kc3BlYzoKICBiYWNrb2ZmTGltaXQ6IDEKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgYXBwOiB2aXRlc3MKICAgICAgICBjb21wb25lbnQ6IHZ0Y3RsY2xpZW50CiAgICAgICAgdnRjdGxjbGllbnRKb2I6ICJ0cnVlIgoKICAgIHNwZWM6CiAgICAgIHJlc3RhcnRQb2xpY3k6IE9uRmFpbHVyZQogICAgICBjb250YWluZXJzOgogICAgICAtIG5hbWU6IHZ0am9iCiAgICAgICAgaW1hZ2U6ICJ2aXRlc3MvdnRjdGxjbGllbnQ6e3skdml0ZXNzVGFnfX0iCiAgICAgICAgdm9sdW1lTW91bnRzOgp7eyBpbmNsdWRlICJ1c2VyLXNlY3JldC12b2x1bWVNb3VudHMiICRkZWZhdWx0VnRjdGxjbGllbnQuc2VjcmV0cyB8IGluZGVudCAxMCB9fQogICAgICAgIHJlc291cmNlczoKe3sgdG9ZYW1sICgkam9iLnJlc291cmNlcyB8IGRlZmF1bHQgJGRlZmF1bHRWdGN0bGNsaWVudC5yZXNvdXJjZXMpIHwgaW5kZW50IDEwIH19CgogICAgICAgIGNvbW1hbmQ6IFsiYmFzaCJdCiAgICAgICAgYXJnczoKICAgICAgICAgIC0gIi1jIgogICAgICAgICAgLSB8CiAgICAgICAgICAgIHNldCAtZXgKCiAgICAgICAgICAgIFZUQ1RMRF9TVkM9dnRjdGxkLnt7ICRuYW1lc3BhY2UgfX06MTU5OTkKICAgICAgICAgICAgVlRDVExfRVhUUkFfRkxBR1M9KHt7IGluY2x1ZGUgImZvcm1hdC1mbGFncy1pbmxpbmUiICRkZWZhdWx0VnRjdGxjbGllbnQuZXh0cmFGbGFncyB9fSkKICAgICAgICAgICAgdnRjdGxjbGllbnQgJHtWVENUTF9FWFRSQV9GTEFHU1tAXX0gLXNlcnZlciAkVlRDVExEX1NWQyB7eyAkam9iLmNvbW1hbmQgfX0KICAgICAgdm9sdW1lczoKe3sgaW5jbHVkZSAidXNlci1zZWNyZXQtdm9sdW1lcyIgJHNlY3JldHMgfCBpbmRlbnQgOCB9fQoKe3stIGVuZCAtfX0KCnt7LSBkZWZpbmUgInZ0d29ya2VyLWpvYiIgLX19Cnt7LSAkam9iIDo9IGluZGV4IC4gMCAtfX0Ke3stICRkZWZhdWx0VnR3b3JrZXIgOj0gaW5kZXggLiAxIC19fQp7ey0gJG5hbWVzcGFjZSA6PSBpbmRleCAuIDIgLX19Cnt7LSAkY2VsbCA6PSBpbmRleCAuIDMgLX19Cgp7ey0gJHZpdGVzc1RhZyA6PSAkam9iLnZpdGVzc1RhZyB8IGRlZmF1bHQgJGRlZmF1bHRWdHdvcmtlci52aXRlc3NUYWcgLX19Cnt7LSAkc2VjcmV0cyA6PSAkam9iLnNlY3JldHMgfCBkZWZhdWx0ICRkZWZhdWx0VnR3b3JrZXIuc2VjcmV0cyB9fQotLS0KCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgdnR3b3JrZXIgU2VydmljZUFjY291bnQKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZTogdnR3b3JrZXIKICBsYWJlbHM6CiAgICBhcHA6IHZpdGVzcwotLS0KCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgdnRnYXRlIFJvbGVCaW5kaW5nCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogdnR3b3JrZXItdG9wby1tZW1iZXIKcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IFJvbGUKICBuYW1lOiB2dC10b3BvLW1lbWJlcgpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IHZ0d29ya2VyCiAgbmFtZXNwYWNlOiB7eyAkbmFtZXNwYWNlIH19Ci0tLQoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBWaXRlc3MgdnR3b3JrZXIgSm9iCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCmFwaVZlcnNpb246IGJhdGNoL3YxCmtpbmQ6IEpvYgptZXRhZGF0YToKICBuYW1lOiB2dHdvcmtlci17eyAkam9iLm5hbWUgfX0Kc3BlYzoKICBiYWNrb2ZmTGltaXQ6IDEKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgYXBwOiB2aXRlc3MKICAgICAgICBjb21wb25lbnQ6IHZ0d29ya2VyCiAgICAgICAgdnR3b3JrZXJKb2I6ICJ0cnVlIgoKICAgIHNwZWM6CiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogdnR3b3JrZXIKe3sgaW5jbHVkZSAicG9kLXNlY3VyaXR5IiAuIHwgaW5kZW50IDYgfX0KICAgICAgcmVzdGFydFBvbGljeTogT25GYWlsdXJlCiAgICAgIGNvbnRhaW5lcnM6CiAgICAgIC0gbmFtZTogdnRqb2IKICAgICAgICBpbWFnZTogInZpdGVzcy92dHdvcmtlcjp7eyR2aXRlc3NUYWd9fSIKICAgICAgICB2b2x1bWVNb3VudHM6Cnt7IGluY2x1ZGUgInVzZXItc2VjcmV0LXZvbHVtZU1vdW50cyIgJGRlZmF1bHRWdHdvcmtlci5zZWNyZXRzIHwgaW5kZW50IDEwIH19CiAgICAgICAgcmVzb3VyY2VzOgp7eyB0b1lhbWwgKCRqb2IucmVzb3VyY2VzIHwgZGVmYXVsdCAkZGVmYXVsdFZ0d29ya2VyLnJlc291cmNlcykgfCBpbmRlbnQgMTAgfX0KCiAgICAgICAgY29tbWFuZDogWyJiYXNoIl0KICAgICAgICBhcmdzOgogICAgICAgICAgLSAiLWMiCiAgICAgICAgICAtIHwKICAgICAgICAgICAgc2V0IC1leAoKICAgICAgICAgICAgZXZhbCBleGVjIC92dC9iaW4vdnR3b3JrZXIgJChjYXQgPDxFTkRfT0ZfQ09NTUFORAogICAgICAgICAgICAgIC10b3BvX2dsb2JhbF9yb290PS92aXRlc3MvZ2xvYmFsCiAgICAgICAgICAgICAge3stIGlmIGVxICgkY2VsbC50b3BvbG9neVByb3ZpZGVyIHwgZGVmYXVsdCAiIikgImV0Y2QyIiB9fQogICAgICAgICAgICAgIC10b3BvX2ltcGxlbWVudGF0aW9uPWV0Y2QyCiAgICAgICAgICAgICAgLXRvcG9fZ2xvYmFsX3NlcnZlcl9hZGRyZXNzPSJldGNkLWdsb2JhbC1jbGllbnQue3sgJG5hbWVzcGFjZSB9fToyMzc5IgogICAgICAgICAgICAgIHt7LSBlbHNlIH19CiAgICAgICAgICAgICAgLXRvcG9faW1wbGVtZW50YXRpb249Ims4cyIKICAgICAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICAgICAgLWNlbGw9e3sgJGpvYi5jZWxsIHwgcXVvdGUgfX0KICAgICAgICAgICAgICAtbG9ndG9zdGRlcnI9dHJ1ZQogICAgICAgICAgICAgIC1zdGRlcnJ0aHJlc2hvbGQ9MAogICAgICAgICAgICBFTkRfT0ZfQ09NTUFORAogICAgICAgICAgICApIHt7ICRqb2IuY29tbWFuZCB9fQogICAgICB2b2x1bWVzOgp7eyBpbmNsdWRlICJ1c2VyLXNlY3JldC12b2x1bWVzIiAkc2VjcmV0cyB8IGluZGVudCA4IH19Cgp7ey0gZW5kIC19fQo=
    name: templates/_jobs.tpl
  - data: IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBrZXlzcGFjZSBpbml0aWFsaXphdGlvbnMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCnt7LSBkZWZpbmUgImtleXNwYWNlIiAtfX0Ke3stICRjZWxsIDo9IGluZGV4IC4gMCAtfX0Ke3stICRrZXlzcGFjZSA6PSBpbmRleCAuIDEgLX19Cnt7LSAkZGVmYXVsdFZ0Y3RsY2xpZW50IDo9IGluZGV4IC4gMiAtfX0Ke3stICRuYW1lc3BhY2UgOj0gaW5kZXggLiAzIC19fQoKIyBzYW5pdGl6ZSBpbnB1dHMgZm9yIGxhYmVscwp7ey0gJGtleXNwYWNlQ2xlYW4gOj0gaW5jbHVkZSAiY2xlYW4tbGFiZWwiICRrZXlzcGFjZS5uYW1lIC19fQoKe3stIHdpdGggJGNlbGwudnRjdGxkIC19fQoKIyBkZWZpbmUgaW1hZ2UgdG8gdXNlCnt7LSAkdml0ZXNzVGFnIDo9IC52aXRlc3NUYWcgfCBkZWZhdWx0ICRkZWZhdWx0VnRjdGxjbGllbnQudml0ZXNzVGFnIC19fQp7ey0gJHNlY3JldHMgOj0gLnNlY3JldHMgfCBkZWZhdWx0ICRkZWZhdWx0VnRjdGxjbGllbnQuc2VjcmV0cyAtfX0KCnt7LSByYW5nZSAkbmFtZSwgJHNjaGVtYSA6PSAka2V5c3BhY2Uuc2NoZW1hIH19Ci0tLQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIEFwcGx5U2NoZW1hIEpvYgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwphcGlWZXJzaW9uOiBiYXRjaC92MQpraW5kOiBKb2IKbWV0YWRhdGE6CiAgbmFtZToge3sgJGtleXNwYWNlQ2xlYW4gfX0tYXBwbHktc2NoZW1hLXt7ICRuYW1lIH19CnNwZWM6CiAgYmFja29mZkxpbWl0OiAxCiAgdGVtcGxhdGU6CiAgICBzcGVjOgogICAgICByZXN0YXJ0UG9saWN5OiBPbkZhaWx1cmUKICAgICAgY29udGFpbmVyczoKICAgICAgLSBuYW1lOiBhcHBseS1zY2hlbWEKICAgICAgICBpbWFnZTogInZpdGVzcy92dGN0bGNsaWVudDp7eyR2aXRlc3NUYWd9fSIKICAgICAgICB2b2x1bWVNb3VudHM6Cnt7IGluY2x1ZGUgInVzZXItc2VjcmV0LXZvbHVtZU1vdW50cyIgJGRlZmF1bHRWdGN0bGNsaWVudC5zZWNyZXRzIHwgaW5kZW50IDEwIH19CgogICAgICAgIGNvbW1hbmQ6IFsiYmFzaCJdCiAgICAgICAgYXJnczoKICAgICAgICAgIC0gIi1jIgogICAgICAgICAgLSB8CiAgICAgICAgICAgIHNldCAtZXgKCiAgICAgICAgICAgIFZUQ1RMRF9TVkM9dnRjdGxkLnt7ICRuYW1lc3BhY2UgfX06MTU5OTkKICAgICAgICAgICAgU0VDT05EUz0wCiAgICAgICAgICAgIFRJTUVPVVRfU0VDT05EUz02MDAKICAgICAgICAgICAgVlRDVExfRVhUUkFfRkxBR1M9KHt7IGluY2x1ZGUgImZvcm1hdC1mbGFncy1pbmxpbmUiICRkZWZhdWx0VnRjdGxjbGllbnQuZXh0cmFGbGFncyB9fSkKCiAgICAgICAgICAgICMgcG9sbCBldmVyeSA1IHNlY29uZHMgdG8gc2VlIGlmIHZ0Y3RsZCBpcyByZWFkeQogICAgICAgICAgICB1bnRpbCB2dGN0bGNsaWVudCAke1ZUQ1RMX0VYVFJBX0ZMQUdTW0BdfSAtc2VydmVyICRWVENUTERfU1ZDIExpc3RBbGxUYWJsZXRzIHt7ICRjZWxsLm5hbWUgfX0gPiAvZGV2L251bGwgMj4mMTsgZG8KICAgICAgICAgICAgICBpZiAoKCAkU0VDT05EUyA+ICRUSU1FT1VUX1NFQ09ORFMgKSk7IHRoZW4KICAgICAgICAgICAgICAgIGVjaG8gInRpbWVkIG91dCB3YWl0aW5nIGZvciB2dGN0bGNsaWVudCB0byBiZSByZWFkeSIKICAgICAgICAgICAgICAgIGV4aXQgMQogICAgICAgICAgICAgIGZpCiAgICAgICAgICAgICAgc2xlZXAgNQogICAgICAgICAgICBkb25lCgogICAgICAgICAgICB3aGlsZSB0cnVlOyBkbwogICAgICAgICAgICAgIGlmICgoICRTRUNPTkRTID4gJFRJTUVPVVRfU0VDT05EUyApKTsgdGhlbgogICAgICAgICAgICAgICAgZWNobyAidGltZWQgb3V0IHdhaXRpbmcgZm9yIG1hc3RlciIKICAgICAgICAgICAgICAgIGV4aXQgMQogICAgICAgICAgICAgIGZpCgogICAgICAgICAgICAgICMgd2FpdCBmb3IgYWxsIHNoYXJkcyB0byBoYXZlIGEgbWFzdGVyCiAgICAgICAgICAgICAge3stIHJhbmdlICRzaGFyZCA6PSAka2V5c3BhY2Uuc2hhcmRzIH19CiAgICAgICAgICAgICAgbWFzdGVyX2FsaWFzPSQodnRjdGxjbGllbnQgJHtWVExDVExfRVhUUkFfRkxBR1NbQF19IC1zZXJ2ZXIgJFZUQ1RMRF9TVkMgR2V0U2hhcmQge3sgJGtleXNwYWNlLm5hbWUgfX0ve3sgJHNoYXJkLm5hbWUgfX0gfCBqcSAnLm1hc3Rlcl9hbGlhcy51aWQnKQogICAgICAgICAgICAgIGlmIFsgIiRtYXN0ZXJfYWxpYXMiID09ICJudWxsIiAtbyAiJG1hc3Rlcl9hbGlhcyIgPT0gIiIgXTsgdGhlbgogICAgICAgICAgICAgICAgICBlY2hvICJubyBtYXN0ZXIgZm9yICd7eyAka2V5c3BhY2UubmFtZSB9fS97eyAkc2hhcmQubmFtZSB9fScgeWV0LCBjb250aW51aW5nIHRvIHdhaXQiCiAgICAgICAgICAgICAgICAgIHNsZWVwIDUKICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICBmaQogICAgICAgICAgICAgIHt7LSBlbmQgfX0KCiAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgZG9uZQoKICAgICAgICAgICAgdnRjdGxjbGllbnQgJHtWVENUTF9FWFRSQV9GTEFHU1tAXX0gLXNlcnZlciAkVlRDVExEX1NWQyBBcHBseVNjaGVtYSAtc3FsICIkKGNhdCA8PEVORF9PRl9DT01NQU5ECnt7ICRzY2hlbWEgfCBpbmRlbnQgMTR9fQogICAgICAgICAgICBFTkRfT0ZfQ09NTUFORAogICAgICAgICAgICApIiB7eyAka2V5c3BhY2UubmFtZSB9fQogICAgICB2b2x1bWVzOgp7eyBpbmNsdWRlICJ1c2VyLXNlY3JldC12b2x1bWVzIiAkc2VjcmV0cyB8IGluZGVudCA4IH19Cnt7IGVuZCB9fQoKe3stIHJhbmdlICRuYW1lLCAkdnNjaGVtYSA6PSAka2V5c3BhY2UudnNjaGVtYSB9fQotLS0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBBcHBseVZTY2hlbWEgam9iCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCmFwaVZlcnNpb246IGJhdGNoL3YxCmtpbmQ6IEpvYgptZXRhZGF0YToKICBuYW1lOiB7eyAka2V5c3BhY2VDbGVhbiB9fS1hcHBseS12c2NoZW1hLXt7ICRuYW1lIH19CnNwZWM6CiAgYmFja29mZkxpbWl0OiAxCiAgdGVtcGxhdGU6CiAgICBzcGVjOgogICAgICByZXN0YXJ0UG9saWN5OiBPbkZhaWx1cmUKICAgICAgY29udGFpbmVyczoKICAgICAgLSBuYW1lOiBhcHBseS12c2NoZW1hCiAgICAgICAgaW1hZ2U6ICJ2aXRlc3MvdnRjdGxjbGllbnQ6e3skdml0ZXNzVGFnfX0iCiAgICAgICAgdm9sdW1lTW91bnRzOgp7eyBpbmNsdWRlICJ1c2VyLXNlY3JldC12b2x1bWVNb3VudHMiICRkZWZhdWx0VnRjdGxjbGllbnQuc2VjcmV0cyB8IGluZGVudCAxMCB9fQoKICAgICAgICBjb21tYW5kOiBbImJhc2giXQogICAgICAgIGFyZ3M6CiAgICAgICAgICAtICItYyIKICAgICAgICAgIC0gfAogICAgICAgICAgICBzZXQgLWV4CgogICAgICAgICAgICBWVENUTERfU1ZDPXZ0Y3RsZC57eyAkbmFtZXNwYWNlIH19OjE1OTk5CiAgICAgICAgICAgIFNFQ09ORFM9MAogICAgICAgICAgICBUSU1FT1VUX1NFQ09ORFM9NjAwCiAgICAgICAgICAgIFZUQ1RMX0VYVFJBX0ZMQUdTPSh7eyBpbmNsdWRlICJmb3JtYXQtZmxhZ3MtaW5saW5lIiAkZGVmYXVsdFZ0Y3RsY2xpZW50LmV4dHJhRmxhZ3MgfX0pCgogICAgICAgICAgICAjIHBvbGwgZXZlcnkgNSBzZWNvbmRzIHRvIHNlZSBpZiBrZXlzcGFjZSBpcyBjcmVhdGVkCiAgICAgICAgICAgIHVudGlsIHZ0Y3RsY2xpZW50ICR7VlRDVExfRVhUUkFfRkxBR1NbQF19IC1zZXJ2ZXIgJFZUQ1RMRF9TVkMgR2V0S2V5c3BhY2Uge3sgJGtleXNwYWNlLm5hbWUgfX0gPiAvZGV2L251bGwgMj4mMTsgZG8KICAgICAgICAgICAgICBpZiAoKCAkU0VDT05EUyA+ICRUSU1FT1VUX1NFQ09ORFMgKSk7IHRoZW4KICAgICAgICAgICAgICAgIGVjaG8gInRpbWVkIG91dCB3YWl0aW5nIGZvciBrZXlzcGFjZSB7eyAka2V5c3BhY2UubmFtZSB9fSB0byBiZSByZWFkeSIKICAgICAgICAgICAgICAgIGV4aXQgMQogICAgICAgICAgICAgIGZpCiAgICAgICAgICAgICAgc2xlZXAgNQogICAgICAgICAgICBkb25lCgogICAgICAgICAgICB2dGN0bGNsaWVudCAke1ZUQ1RMX0VYVFJBX0ZMQUdTW0BdfSAtc2VydmVyICRWVENUTERfU1ZDIEFwcGx5VlNjaGVtYSAtdnNjaGVtYSAiJChjYXQgPDxFTkRfT0ZfQ09NTUFORAp7eyAkdnNjaGVtYSB8IGluZGVudCAxNCB9fQogICAgICAgICAgICBFTkRfT0ZfQ09NTUFORAogICAgICAgICAgICApIiB7eyAka2V5c3BhY2UubmFtZSB9fQogICAgICB2b2x1bWVzOgp7eyBpbmNsdWRlICJ1c2VyLXNlY3JldC12b2x1bWVzIiAkc2VjcmV0cyB8IGluZGVudCA4IH19Cgp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQo=
    name: templates/_keyspace.tpl
  - data: 
    name: templates/_orchestrator-conf.tpl
  - data: IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBNYXN0ZXIgT3JjaGVzdHJhdG9yIFNlcnZpY2UKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKe3sgZGVmaW5lICJvcmNoZXN0cmF0b3IiIC19fQojIHNldCB0dXBsZSB2YWx1ZXMgdG8gbW9yZSByZWNvZ25pemFibGUgdmFyaWFibGVzCnt7LSAkb3JjIDo9IGluZGV4IC4gMCAtfX0Ke3stICRkZWZhdWx0VnRjdGxjbGllbnQgOj0gaW5kZXggLiAxIH19CgphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlCm1ldGFkYXRhOgogIG5hbWU6IG9yY2hlc3RyYXRvcgogIGxhYmVsczoKICAgIGFwcDogdml0ZXNzCiAgICBjb21wb25lbnQ6IG9yY2hlc3RyYXRvcgpzcGVjOgogIHBvcnRzOgogICAgLSBuYW1lOiB3ZWIKICAgICAgcG9ydDogODAKICAgICAgdGFyZ2V0UG9ydDogMzAwMAogIHNlbGVjdG9yOgogICAgYXBwOiB2aXRlc3MKICAgIGNvbXBvbmVudDogb3JjaGVzdHJhdG9yCiAgdHlwZTogQ2x1c3RlcklQCgotLS0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBIZWFkbGVzcyBPcmNoZXN0cmF0b3IgU2VydmljZQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlCm1ldGFkYXRhOgogIG5hbWU6IG9yY2hlc3RyYXRvci1oZWFkbGVzcwogIGFubm90YXRpb25zOgogICAgc2VydmljZS5hbHBoYS5rdWJlcm5ldGVzLmlvL3RvbGVyYXRlLXVucmVhZHktZW5kcG9pbnRzOiAidHJ1ZSIKICBsYWJlbHM6CiAgICBhcHA6IHZpdGVzcwogICAgY29tcG9uZW50OiBvcmNoZXN0cmF0b3IKc3BlYzoKICBjbHVzdGVySVA6IE5vbmUKICBwb3J0czoKICAgIC0gbmFtZTogd2ViCiAgICAgIHBvcnQ6IDgwCiAgICAgIHRhcmdldFBvcnQ6IDMwMDAKICBzZWxlY3RvcjoKICAgIGNvbXBvbmVudDogb3JjaGVzdHJhdG9yCiAgICBhcHA6IHZpdGVzcwoKLS0tCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIE9yY2hlc3RyYXRvciBTdGF0ZWZ1bFNldAojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IFN0YXRlZnVsU2V0Cm1ldGFkYXRhOgogIG5hbWU6IG9yY2hlc3RyYXRvcgpzcGVjOgogIHNlcnZpY2VOYW1lOiBvcmNoZXN0cmF0b3ItaGVhZGxlc3MKICByZXBsaWNhczoge3sgJG9yYy5yZXBsaWNhcyB9fQogIHBvZE1hbmFnZW1lbnRQb2xpY3k6IFBhcmFsbGVsCiAgdXBkYXRlU3RyYXRlZ3k6CiAgICB0eXBlOiBSb2xsaW5nVXBkYXRlCiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgYXBwOiB2aXRlc3MKICAgICAgY29tcG9uZW50OiBvcmNoZXN0cmF0b3IKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgYXBwOiB2aXRlc3MKICAgICAgICBjb21wb25lbnQ6IG9yY2hlc3RyYXRvcgogICAgc3BlYzoKICAgICAgYWZmaW5pdHk6CiAgICAgICAgcG9kQW50aUFmZmluaXR5OgogICAgICAgICAgcHJlZmVycmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICAgICAgICAjIHN0cm9uZ2x5IHByZWZlciB0byBzdGF5IGF3YXkgZnJvbSBvdGhlciBvcmNoZXN0cmF0b3JzCiAgICAgICAgICAtIHdlaWdodDogMTAwCiAgICAgICAgICAgIHBvZEFmZmluaXR5VGVybToKICAgICAgICAgICAgICB0b3BvbG9neUtleToga3ViZXJuZXRlcy5pby9ob3N0bmFtZQogICAgICAgICAgICAgIGxhYmVsU2VsZWN0b3I6CiAgICAgICAgICAgICAgICBtYXRjaExhYmVsczoKICAgICAgICAgICAgICAgICAgYXBwOiAidml0ZXNzIgogICAgICAgICAgICAgICAgICBjb21wb25lbnQ6ICJvcmNoZXN0cmF0b3IiCgogICAgICBpbml0Q29udGFpbmVyczoKe3sgaW5jbHVkZSAiaW5pdC1vcmNoZXN0cmF0b3IiICRvcmMgfCBpbmRlbnQgOCB9fQoKICAgICAgY29udGFpbmVyczoKICAgICAgICAtIG5hbWU6IG9yY2hlc3RyYXRvcgogICAgICAgICAgaW1hZ2U6IHt7ICRvcmMuaW1hZ2UgfCBxdW90ZSB9fQogICAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiBJZk5vdFByZXNlbnQKICAgICAgICAgIHBvcnRzOgogICAgICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDMwMDAKICAgICAgICAgICAgICBuYW1lOiB3ZWIKICAgICAgICAgICAgICBwcm90b2NvbDogVENQCiAgICAgICAgICAgIC0gY29udGFpbmVyUG9ydDogMTAwMDgKICAgICAgICAgICAgICBuYW1lOiByYWZ0CiAgICAgICAgICAgICAgcHJvdG9jb2w6IFRDUAogICAgICAgICAgbGl2ZW5lc3NQcm9iZToKICAgICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgICBwYXRoOiAvYXBpL2xiLWNoZWNrCiAgICAgICAgICAgICAgcG9ydDogMzAwMAogICAgICAgICAgICBpbml0aWFsRGVsYXlTZWNvbmRzOiAzMDAKICAgICAgICAgICAgdGltZW91dFNlY29uZHM6IDEwCiAgICAgICAgICByZWFkaW5lc3NQcm9iZToKICAgICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgICBwYXRoOiAiL2FwaS9yYWZ0LWhlYWx0aCIKICAgICAgICAgICAgICBwb3J0OiAzMDAwCiAgICAgICAgICAgIHRpbWVvdXRTZWNvbmRzOiAxMAoKICAgICAgICAgIHJlc291cmNlczoKe3sgdG9ZYW1sICgkb3JjLnJlc291cmNlcykgfCBpbmRlbnQgMTIgfX0KCiAgICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgICAgIC0gbmFtZTogY29uZmlnLXNoYXJlZAogICAgICAgICAgICAgIG1vdW50UGF0aDogL2NvbmYvCiAgICAgICAgICAgIC0gbmFtZTogdG1wbG9ncwogICAgICAgICAgICAgIG1vdW50UGF0aDogL3RtcAp7eyBpbmNsdWRlICJ1c2VyLXNlY3JldC12b2x1bWVNb3VudHMiICRkZWZhdWx0VnRjdGxjbGllbnQuc2VjcmV0cyB8IGluZGVudCAxMiB9fQogICAgICAgICAgZW52OgogICAgICAgICAgICAtIG5hbWU6IFZUQ1RMRF9TRVJWRVJfUE9SVAogICAgICAgICAgICAgIHZhbHVlOiAiMTU5OTkiCgogICAgICAgIC0gbmFtZTogcmVjb3ZlcnktbG9nCiAgICAgICAgICBpbWFnZTogdml0ZXNzL2xvZ3RhaWw6aGVsbS0yLjAuMC0wCiAgICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IElmTm90UHJlc2VudAogICAgICAgICAgZW52OgogICAgICAgICAgLSBuYW1lOiBUQUlMX0ZJTEVQQVRICiAgICAgICAgICAgIHZhbHVlOiAvdG1wL3JlY292ZXJ5LmxvZwogICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgICAtIG5hbWU6IHRtcGxvZ3MKICAgICAgICAgICAgICBtb3VudFBhdGg6IC90bXAKCiAgICAgICAgLSBuYW1lOiBhdWRpdC1sb2cKICAgICAgICAgIGltYWdlOiB2aXRlc3MvbG9ndGFpbDpoZWxtLTIuMC4wLTAKICAgICAgICAgIGltYWdlUHVsbFBvbGljeTogSWZOb3RQcmVzZW50CiAgICAgICAgICBlbnY6CiAgICAgICAgICAtIG5hbWU6IFRBSUxfRklMRVBBVEgKICAgICAgICAgICAgdmFsdWU6IC90bXAvb3JjaGVzdHJhdG9yLWF1ZGl0LmxvZwogICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgICAtIG5hbWU6IHRtcGxvZ3MKICAgICAgICAgICAgICBtb3VudFBhdGg6IC90bXAKCiAgICAgIHZvbHVtZXM6CiAgICAgICAgLSBuYW1lOiBjb25maWctbWFwCiAgICAgICAgICBjb25maWdNYXA6CiAgICAgICAgICAgIG5hbWU6IG9yY2hlc3RyYXRvci1jbQogICAgICAgIC0gbmFtZTogY29uZmlnLXNoYXJlZAogICAgICAgICAgZW1wdHlEaXI6IHt9CiAgICAgICAgLSBuYW1lOiB0bXBsb2dzCiAgICAgICAgICBlbXB0eURpcjoge30Ke3sgaW5jbHVkZSAidXNlci1zZWNyZXQtdm9sdW1lcyIgJGRlZmF1bHRWdGN0bGNsaWVudC5zZWNyZXRzIHwgaW5kZW50IDggfX0KCnt7LSBlbmQgLX19CgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIFBlciBTdGF0ZWZ1bFNldCBPcmNoZXN0cmF0b3IgU2VydmljZQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwp7eyBkZWZpbmUgIm9yY2hlc3RyYXRvci1zdGF0ZWZ1bHNldC1zZXJ2aWNlIiAtfX0KIyBzZXQgdHVwbGUgdmFsdWVzIHRvIG1vcmUgcmVjb2duaXphYmxlIHZhcmlhYmxlcwp7ey0gJG9yYyA6PSBpbmRleCAuIDAgLX19Cnt7LSAkaSA6PSBpbmRleCAuIDEgfX0KCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2UKbWV0YWRhdGE6CiAgbmFtZTogb3JjaGVzdHJhdG9yLXt7ICRpIH19CiAgYW5ub3RhdGlvbnM6CiAgICBzZXJ2aWNlLmFscGhhLmt1YmVybmV0ZXMuaW8vdG9sZXJhdGUtdW5yZWFkeS1lbmRwb2ludHM6ICJ0cnVlIgogIGxhYmVsczoKICAgIGFwcDogdml0ZXNzCiAgICBjb21wb25lbnQ6IG9yY2hlc3RyYXRvcgpzcGVjOgogIHBvcnRzOgogICAgLSBuYW1lOiB3ZWIKICAgICAgcG9ydDogODAKICAgICAgdGFyZ2V0UG9ydDogMzAwMAogICAgLSBuYW1lOiByYWZ0CiAgICAgIHBvcnQ6IDEwMDA4CiAgICAgIHRhcmdldFBvcnQ6IDEwMDA4CiAgc2VsZWN0b3I6CiAgICBjb21wb25lbnQ6IG9yY2hlc3RyYXRvcgogICAgYXBwOiB2aXRlc3MKICAgICMgdGhpcyBzaG91bGQgYmUgYXV0by1maWxsZWQgYnkga3ViZXJuZXRlcwogICAgc3RhdGVmdWxzZXQua3ViZXJuZXRlcy5pby9wb2QtbmFtZTogIm9yY2hlc3RyYXRvci17eyAkaSB9fSIKCnt7LSBlbmQgLX19CgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIGluaXQtY29udGFpbmVyIHRvIGNvcHkgYW5kIHNlZAojIE9yY2hlc3RyYXRvciBjb25maWcgZnJvbSBDb25maWdNYXAKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKe3sgZGVmaW5lICJpbml0LW9yY2hlc3RyYXRvciIgLX19Cnt7LSAkb3JjIDo9IC4gfX0KCi0gbmFtZTogaW5pdC1vcmNoZXN0cmF0b3IKICBpbWFnZToge3sgJG9yYy5pbWFnZSB8IHF1b3RlIH19CiAgdm9sdW1lTW91bnRzOgogICAgLSBuYW1lOiBjb25maWctbWFwCiAgICAgIG1vdW50UGF0aDogL2NvbmZ0bXAvCiAgICAtIG5hbWU6IGNvbmZpZy1zaGFyZWQKICAgICAgbW91bnRQYXRoOiAvY29uZi8KICBlbnY6CiAgICAtIG5hbWU6IE1ZX1BPRF9OQU1FCiAgICAgIHZhbHVlRnJvbToKICAgICAgICBmaWVsZFJlZjoKICAgICAgICAgIGZpZWxkUGF0aDogbWV0YWRhdGEubmFtZQoKICBjb21tYW5kOiBbImJhc2giXQogIGFyZ3M6CiAgICAtICItYyIKICAgIC0gfAogICAgICBzZXQgLWV4CgogICAgICAjIG1ha2UgYSBjb3B5IG9mIHRoZSBjb25maWcgbWFwIGZpbGUgYmVmb3JlIGVkaXRpbmcgaXQgbG9jYWxseQogICAgICBjcCAvY29uZnRtcC9vcmNoZXN0cmF0b3IuY29uZi5qc29uIC9jb25mL29yY2hlc3RyYXRvci5jb25mLmpzb24KCiAgICAgICMgc2V0IHRoZSBsb2NhbCBjb25maWcgdG8gYWR2ZXJ0aXNlL2JpbmQgaXRzIG93biBzZXJ2aWNlIElQCiAgICAgIHNlZCAtaSAtZSAicy9QT0RfTkFNRS8kTVlfUE9EX05BTUUvZyIgL2NvbmYvb3JjaGVzdHJhdG9yLmNvbmYuanNvbgoKe3stIGVuZCAtfX0K
    name: templates/_orchestrator.tpl
  - data: 
    name: templates/_pmm.tpl
  - data: IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBzaGFyZCBpbml0aWFsaXphdGlvbnMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCnt7IGRlZmluZSAic2hhcmQiIC19fQp7ey0gJGNlbGwgOj0gaW5kZXggLiAwIC19fQp7ey0gJGtleXNwYWNlIDo9IGluZGV4IC4gMSAtfX0Ke3stICRzaGFyZCA6PSBpbmRleCAuIDIgLX19Cnt7LSAkZGVmYXVsdFZ0Y3RsY2xpZW50IDo9IGluZGV4IC4gMyAtfX0Ke3stICRuYW1lc3BhY2UgOj0gaW5kZXggLiA0IC19fQp7ey0gJHRvdGFsVGFibGV0Q291bnQgOj0gaW5kZXggLiA1IC19fQoKe3stICRjZWxsQ2xlYW4gOj0gaW5jbHVkZSAiY2xlYW4tbGFiZWwiICRjZWxsLm5hbWUgLX19Cnt7LSAka2V5c3BhY2VDbGVhbiA6PSBpbmNsdWRlICJjbGVhbi1sYWJlbCIgJGtleXNwYWNlLm5hbWUgLX19Cnt7LSAkc2hhcmRDbGVhbiA6PSBpbmNsdWRlICJjbGVhbi1sYWJlbCIgJHNoYXJkLm5hbWUgLX19Cnt7LSAkc2hhcmROYW1lIDo9IHByaW50ZiAiJXMtJXMtJXMiICRjZWxsQ2xlYW4gJGtleXNwYWNlQ2xlYW4gJHNoYXJkQ2xlYW4gfCBsb3dlciAtfX0KCnt7LSB3aXRoICRjZWxsLnZ0Y3RsZCB9fQojIGRlZmluZSBpbWFnZSB0byB1c2UKe3stICR2aXRlc3NUYWcgOj0gLnZpdGVzc1RhZyB8IGRlZmF1bHQgJGRlZmF1bHRWdGN0bGNsaWVudC52aXRlc3NUYWcgfX0KLS0tCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgSW5pdFNoYXJkTWFzdGVyIEpvYgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwphcGlWZXJzaW9uOiBiYXRjaC92MQpraW5kOiBKb2IKbWV0YWRhdGE6CiAgbmFtZToge3sgJHNoYXJkTmFtZSB9fS1pbml0LXNoYXJkLW1hc3RlcgpzcGVjOgogIGJhY2tvZmZMaW1pdDogMQogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGxhYmVsczoKICAgICAgICBhcHA6IHZpdGVzcwogICAgICAgIGNvbXBvbmVudDogdnR0YWJsZXQKICAgICAgICBjZWxsOiB7eyAkY2VsbENsZWFuIHwgcXVvdGUgfX0KICAgICAgICBrZXlzcGFjZToge3sgJGtleXNwYWNlQ2xlYW4gfCBxdW90ZSB9fQogICAgICAgIHNoYXJkOiB7eyAkc2hhcmRDbGVhbiB8IHF1b3RlIH19CiAgICAgICAgaW5pdFNoYXJkTWFzdGVySm9iOiAidHJ1ZSIKCiAgICBzcGVjOgogICAgICByZXN0YXJ0UG9saWN5OiBPbkZhaWx1cmUKICAgICAgY29udGFpbmVyczoKICAgICAgLSBuYW1lOiBpbml0LXNoYXJkLW1hc3RlcgogICAgICAgIGltYWdlOiAidml0ZXNzL3Z0Y3RsY2xpZW50Ont7JHZpdGVzc1RhZ319IgogICAgICAgIHZvbHVtZU1vdW50czoKe3sgaW5jbHVkZSAidXNlci1zZWNyZXQtdm9sdW1lTW91bnRzIiAkZGVmYXVsdFZ0Y3RsY2xpZW50LnNlY3JldHMgfCBpbmRlbnQgMTAgfX0KCiAgICAgICAgY29tbWFuZDogWyJiYXNoIl0KICAgICAgICBhcmdzOgogICAgICAgICAgLSAiLWMiCiAgICAgICAgICAtIHwKICAgICAgICAgICAgc2V0IC1leAoKICAgICAgICAgICAgVlRDVExEX1NWQz12dGN0bGQue3sgJG5hbWVzcGFjZSB9fToxNTk5OQogICAgICAgICAgICBTRUNPTkRTPTAKICAgICAgICAgICAgVElNRU9VVF9TRUNPTkRTPTYwMAogICAgICAgICAgICBWVENUTF9FWFRSQV9GTEFHUz0oe3sgaW5jbHVkZSAiZm9ybWF0LWZsYWdzLWlubGluZSIgJGRlZmF1bHRWdGN0bGNsaWVudC5leHRyYUZsYWdzIH19KQoKICAgICAgICAgICAgIyBwb2xsIGV2ZXJ5IDUgc2Vjb25kcyB0byBzZWUgaWYgdnRjdGxkIGlzIHJlYWR5CiAgICAgICAgICAgIHVudGlsIHZ0Y3RsY2xpZW50ICR7VlRDVExfRVhUUkFfRkxBR1NbQF19IC1zZXJ2ZXIgJFZUQ1RMRF9TVkMgTGlzdEFsbFRhYmxldHMge3sgJGNlbGwubmFtZSB9fSA+IC9kZXYvbnVsbCAyPiYxOyBkbwogICAgICAgICAgICAgIGlmICgoICRTRUNPTkRTID4gJFRJTUVPVVRfU0VDT05EUyApKTsgdGhlbgogICAgICAgICAgICAgICAgZWNobyAidGltZWQgb3V0IHdhaXRpbmcgZm9yIHZ0Y3RsY2xpZW50IHRvIGJlIHJlYWR5IgogICAgICAgICAgICAgICAgZXhpdCAxCiAgICAgICAgICAgICAgZmkKICAgICAgICAgICAgICBzbGVlcCA1CiAgICAgICAgICAgIGRvbmUKCiAgICAgICAgICAgIHVudGlsIFsgJFRBQkxFVFNfUkVBRFkgXTsgZG8KICAgICAgICAgICAgICAjIGdldCBhbGwgdGhlIHRhYmxldHMgaW4gdGhlIGN1cnJlbnQgY2VsbAogICAgICAgICAgICAgIGNlbGxUYWJsZXRzPSIkKHZ0Y3RsY2xpZW50ICR7VlRDVExfRVhUUkFfRkxBR1NbQF19IC1zZXJ2ZXIgJFZUQ1RMRF9TVkMgTGlzdEFsbFRhYmxldHMge3sgJGNlbGwubmFtZSB9fSkiCgogICAgICAgICAgICAgICMgZmlsdGVyIHRvIG9ubHkgdGhlIHRhYmxldHMgaW4gb3VyIGN1cnJlbnQgc2hhcmQKICAgICAgICAgICAgICBzaGFyZFRhYmxldHM9JCggZWNobyAiJGNlbGxUYWJsZXRzIiB8IGF3ayAnc3Vic3RyKCAkNSwxLHt7IGxlbiAkc2hhcmROYW1lIH19ICkgPT0gInt7ICRzaGFyZE5hbWUgfX0iIHtwcmludCAkMH0nKQoKICAgICAgICAgICAgICAjIGNoZWNrIGZvciBhIG1hc3RlciB0YWJsZXQgZnJvbSB0aGUgTGlzdEFsbFRhYmxldHMgY2FsbAogICAgICAgICAgICAgIG1hc3RlclRhYmxldD0kKCBlY2hvICIkc2hhcmRUYWJsZXRzIiB8IGF3ayAnJDQgPT0gIm1hc3RlciIge3ByaW50ICQxfScpCiAgICAgICAgICAgICAgaWYgWyAkbWFzdGVyVGFibGV0IF07IHRoZW4KICAgICAgICAgICAgICAgICAgZWNobyAiJyRtYXN0ZXJUYWJsZXQnIGlzIGFscmVhZHkgdGhlIG1hc3RlciB0YWJsZXQsIGV4aXRpbmcgd2l0aG91dCBydW5uaW5nIEluaXRTaGFyZE1hc3RlciIKICAgICAgICAgICAgICAgICAgZXhpdAogICAgICAgICAgICAgIGZpCgogICAgICAgICAgICAgICMgY2hlY2sgZm9yIGEgbWFzdGVyIHRhYmxldCBmcm9tIHRoZSBHZXRTaGFyZCBjYWxsCiAgICAgICAgICAgICAgbWFzdGVyX2FsaWFzPSQodnRjdGxjbGllbnQgJHtWVExDVExfRVhUUkFfRkxBR1NbQF19IC1zZXJ2ZXIgJFZUQ1RMRF9TVkMgR2V0U2hhcmQge3sgJGtleXNwYWNlLm5hbWUgfX0ve3sgJHNoYXJkLm5hbWUgfX0gfCBqcSAnLm1hc3Rlcl9hbGlhcy51aWQnKQogICAgICAgICAgICAgIGlmIFsgIiRtYXN0ZXJfYWxpYXMiICE9ICJudWxsIiAtYSAiJG1hc3Rlcl9hbGlhcyIgIT0gIiIgXTsgdGhlbgogICAgICAgICAgICAgICAgICBlY2hvICInJG1hc3Rlcl9hbGlhcycgaXMgYWxyZWFkeSB0aGUgbWFzdGVyIHRhYmxldCwgZXhpdGluZyB3aXRob3V0IHJ1bm5pbmcgSW5pdFNoYXJkTWFzdGVyIgogICAgICAgICAgICAgICAgICBleGl0CiAgICAgICAgICAgICAgZmkKCiAgICAgICAgICAgICAgIyBjb3VudCB0aGUgbnVtYmVyIG9mIG5ld2xpbmVzIGZvciB0aGUgZ2l2ZW4gc2hhcmQgdG8gZ2V0IHRoZSB0YWJsZXQgY291bnQKICAgICAgICAgICAgICB0YWJsZXRDb3VudD0kKCBlY2hvICIkc2hhcmRUYWJsZXRzIiB8IHdjIHwgYXdrICd7cHJpbnQgJDF9JykKCiAgICAgICAgICAgICAgIyBjaGVjayB0byBzZWUgaWYgdGhlIHRhYmxldCBjb3VudCBlcXVhbHMgdGhlIGV4cGVjdGVkIHRhYmxldCBjb3VudAogICAgICAgICAgICAgIGlmIFsgJHRhYmxldENvdW50ID09IHt7ICR0b3RhbFRhYmxldENvdW50IH19IF07IHRoZW4KICAgICAgICAgICAgICAgIFRBQkxFVFNfUkVBRFk9dHJ1ZQogICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIGlmICgoICRTRUNPTkRTID4gJFRJTUVPVVRfU0VDT05EUyApKTsgdGhlbgogICAgICAgICAgICAgICAgICBlY2hvICJ0aW1lZCBvdXQgd2FpdGluZyBmb3IgdGFibGV0cyB0byBiZSByZWFkeSIKICAgICAgICAgICAgICAgICAgZXhpdCAxCiAgICAgICAgICAgICAgICBmaQoKICAgICAgICAgICAgICAgICMgd2FpdCA1IHNlY29uZHMgZm9yIHZ0dGFibGV0cyB0byBjb250aW51ZSBnZXR0aW5nIHJlYWR5CiAgICAgICAgICAgICAgICBzbGVlcCA1CiAgICAgICAgICAgICAgZmkKCiAgICAgICAgICAgIGRvbmUKCiAgICAgICAgICAgICMgZmluZCB0aGUgdGFibGV0IGlkIGZvciB0aGUgIi1yZXBsaWNhLTAiIHN0YXRlZnVsIHNldCBmb3IgYSBnaXZlbiBjZWxsLCBrZXlzcGFjZSBhbmQgc2hhcmQKICAgICAgICAgICAgdGFibGV0X2lkPSQoIGVjaG8gIiRzaGFyZFRhYmxldHMiIHwgYXdrICdzdWJzdHIoICQ1LDEse3sgYWRkIChsZW4gJHNoYXJkTmFtZSkgMTAgfX0gKSA9PSAie3sgJHNoYXJkTmFtZSB9fS1yZXBsaWNhLTAiIHtwcmludCAkMX0nKQoKICAgICAgICAgICAgIyBpbml0aWFsaXplIHRoZSBzaGFyZCBtYXN0ZXIKICAgICAgICAgICAgdW50aWwgdnRjdGxjbGllbnQgJHtWVENUTF9FWFRSQV9GTEFHU1tAXX0gLXNlcnZlciAkVlRDVExEX1NWQyBJbml0U2hhcmRNYXN0ZXIgLWZvcmNlIHt7ICRrZXlzcGFjZS5uYW1lIH19L3t7ICRzaGFyZC5uYW1lIH19ICR0YWJsZXRfaWQ7IGRvCiAgICAgICAgICAgICAgaWYgKCggJFNFQ09ORFMgPiAkVElNRU9VVF9TRUNPTkRTICkpOyB0aGVuCiAgICAgICAgICAgICAgICBlY2hvICJ0aW1lZCBvdXQgd2FpdGluZyBmb3IgSW5pdFNoYXJkTWFzdGVyIHRvIHN1Y2NlZWQiCiAgICAgICAgICAgICAgICBleGl0IDEKICAgICAgICAgICAgICBmaQogICAgICAgICAgICAgIHNsZWVwIDUKICAgICAgICAgICAgZG9uZQogICAgICB2b2x1bWVzOgp7eyBpbmNsdWRlICJ1c2VyLXNlY3JldC12b2x1bWVzIiAoLnNlY3JldHMgfCBkZWZhdWx0ICRkZWZhdWx0VnRjdGxjbGllbnQuc2VjcmV0cykgfCBpbmRlbnQgOCB9fQoKe3stICRjb3B5U2NoZW1hIDo9ICgka2V5c3BhY2UuY29weVNjaGVtYSAgfCBkZWZhdWx0ICRzaGFyZC5jb3B5U2NoZW1hKSAtfX0Ke3stIGlmICRjb3B5U2NoZW1hIH19Ci0tLQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIENvcHlTY2hlbWFTaGFyZCBKb2IKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKYXBpVmVyc2lvbjogYmF0Y2gvdjEKa2luZDogSm9iCm1ldGFkYXRhOgogIG5hbWU6IHt7ICRrZXlzcGFjZUNsZWFuIH19LWNvcHktc2NoZW1hLXt7ICRzaGFyZENsZWFuIH19CnNwZWM6CiAgYmFja29mZkxpbWl0OiAxCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbGFiZWxzOgogICAgICAgIGFwcDogdml0ZXNzCiAgICAgICAgY29tcG9uZW50OiB2dHRhYmxldAogICAgICAgIGNlbGw6IHt7ICRjZWxsQ2xlYW4gfCBxdW90ZSB9fQogICAgICAgIGtleXNwYWNlOiB7eyAka2V5c3BhY2VDbGVhbiB8IHF1b3RlIH19CiAgICAgICAgc2hhcmQ6IHt7ICRzaGFyZENsZWFuIHwgcXVvdGUgfX0KICAgICAgICBjb3B5U2NoZW1hU2hhcmRKb2I6ICJ0cnVlIgoKICAgIHNwZWM6CiAgICAgIHJlc3RhcnRQb2xpY3k6IE9uRmFpbHVyZQogICAgICBjb250YWluZXJzOgogICAgICAtIG5hbWU6IGNvcHktc2NoZW1hCiAgICAgICAgaW1hZ2U6ICJ2aXRlc3MvdnRjdGxjbGllbnQ6e3skdml0ZXNzVGFnfX0iCiAgICAgICAgdm9sdW1lTW91bnRzOgp7eyBpbmNsdWRlICJ1c2VyLXNlY3JldC12b2x1bWVNb3VudHMiICRkZWZhdWx0VnRjdGxjbGllbnQuc2VjcmV0cyB8IGluZGVudCAxMCB9fQoKICAgICAgICBjb21tYW5kOiBbImJhc2giXQogICAgICAgIGFyZ3M6CiAgICAgICAgICAtICItYyIKICAgICAgICAgIC0gfAogICAgICAgICAgICBzZXQgLWV4CgogICAgICAgICAgICBWVENUTERfU1ZDPXZ0Y3RsZC57eyAkbmFtZXNwYWNlIH19OjE1OTk5CiAgICAgICAgICAgIFNFQ09ORFM9MAogICAgICAgICAgICBUSU1FT1VUX1NFQ09ORFM9NjAwCiAgICAgICAgICAgIFZUQ1RMX0VYVFJBX0ZMQUdTPSh7eyBpbmNsdWRlICJmb3JtYXQtZmxhZ3MtaW5saW5lIiAkZGVmYXVsdFZ0Y3RsY2xpZW50LmV4dHJhRmxhZ3MgfX0pCgogICAgICAgICAgICAjIHBvbGwgZXZlcnkgNSBzZWNvbmRzIHRvIHNlZSBpZiB2dGN0bGQgaXMgcmVhZHkKICAgICAgICAgICAgdW50aWwgdnRjdGxjbGllbnQgJHtWVENUTF9FWFRSQV9GTEFHU1tAXX0gLXNlcnZlciAkVlRDVExEX1NWQyBMaXN0QWxsVGFibGV0cyB7eyAkY2VsbC5uYW1lIH19ID4gL2Rldi9udWxsIDI+JjE7IGRvCiAgICAgICAgICAgICAgaWYgKCggJFNFQ09ORFMgPiAkVElNRU9VVF9TRUNPTkRTICkpOyB0aGVuCiAgICAgICAgICAgICAgICBlY2hvICJ0aW1lZCBvdXQgd2FpdGluZyBmb3IgdnRjdGxjbGllbnQgdG8gYmUgcmVhZHkiCiAgICAgICAgICAgICAgICBleGl0IDEKICAgICAgICAgICAgICBmaQogICAgICAgICAgICAgIHNsZWVwIDUKICAgICAgICAgICAgZG9uZQoKICAgICAgICAgICAgd2hpbGUgdHJ1ZTsgZG8KICAgICAgICAgICAgICBpZiAoKCAkU0VDT05EUyA+ICRUSU1FT1VUX1NFQ09ORFMgKSk7IHRoZW4KICAgICAgICAgICAgICAgIGVjaG8gInRpbWVkIG91dCB3YWl0aW5nIGZvciBtYXN0ZXIiCiAgICAgICAgICAgICAgICBleGl0IDEKICAgICAgICAgICAgICBmaQoKICAgICAgICAgICAgICAjIHdhaXQgZm9yIGFsbCBzaGFyZHMgdG8gaGF2ZSBhIG1hc3RlcgogICAgICAgICAgICAgIG1hc3Rlcl9hbGlhcz0kKHZ0Y3RsY2xpZW50ICR7VlRMQ1RMX0VYVFJBX0ZMQUdTW0BdfSAtc2VydmVyICRWVENUTERfU1ZDIEdldFNoYXJkIHt7ICRrZXlzcGFjZS5uYW1lIH19L3t7ICRzaGFyZC5uYW1lIH19IHwganEgJy5tYXN0ZXJfYWxpYXMudWlkJykKICAgICAgICAgICAgICBpZiBbICIkbWFzdGVyX2FsaWFzIiA9PSAibnVsbCIgLW8gIiRtYXN0ZXJfYWxpYXMiID09ICIiIF07IHRoZW4KICAgICAgICAgICAgICAgICAgZWNobyAibm8gbWFzdGVyIGZvciAne3sgJGtleXNwYWNlLm5hbWUgfX0ve3sgJHNoYXJkLm5hbWUgfX0nIHlldCwgY29udGludWluZyB0byB3YWl0IgogICAgICAgICAgICAgICAgICBzbGVlcCA1CiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgZmkKCiAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgZG9uZQoKICAgICAgICAgICAgdnRjdGxjbGllbnQgJHtWVENUTF9FWFRSQV9GTEFHU1tAXX0gLXNlcnZlciAkVlRDVExEX1NWQyBDb3B5U2NoZW1hU2hhcmQge3sgaWYgJGNvcHlTY2hlbWEudGFibGVzIC19fQogICAgICAgICAgICAtdGFibGVzPScKICAgICAgICAgICAgICB7ey0gcmFuZ2UgJGluZGV4LCAkdGFibGUgOj0gJGNvcHlTY2hlbWEudGFibGVzIC19fQogICAgICAgICAgICAgICAge3stIGlmICRpbmRleCAtfX0se3stIGVuZCAtfX0KICAgICAgICAgICAgICAgIHt7ICR0YWJsZSB9fQogICAgICAgICAgICAgIHt7LSBlbmQgLX19CiAgICAgICAgICAgICcKICAgICAgICAgICAge3stIGVuZCB9fSB7eyAkY29weVNjaGVtYS5zb3VyY2UgfX0ge3sgJGtleXNwYWNlLm5hbWUgfX0ve3sgJHNoYXJkLm5hbWUgfX0KICAgICAgdm9sdW1lczoKe3sgaW5jbHVkZSAidXNlci1zZWNyZXQtdm9sdW1lcyIgKC5zZWNyZXRzIHwgZGVmYXVsdCAkZGVmYXVsdFZ0Y3RsY2xpZW50LnNlY3JldHMpIHwgaW5kZW50IDggfX0Ke3sgZW5kIH19CgoKe3stIGVuZCAtfX0Ke3stIGVuZCAtfX0K
    name: templates/_shard.tpl
  - data: IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyB2dGN0bGQgU2VydmljZSArIERlcGxveW1lbnQKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKe3sgZGVmaW5lICJ2dGN0bGQiIC19fQojIHNldCB0dXBsZSB2YWx1ZXMgdG8gbW9yZSByZWNvZ25pemFibGUgdmFyaWFibGVzCnt7LSAkdG9wb2xvZ3kgOj0gaW5kZXggLiAwIC19fQp7ey0gJGNlbGwgOj0gaW5kZXggLiAxIC19fQp7ey0gJGRlZmF1bHRWdGN0bGQgOj0gaW5kZXggLiAyIC19fQp7ey0gJG5hbWVzcGFjZSA6PSBpbmRleCAuIDMgLX19Cnt7LSAkY29uZmlnIDo9IGluZGV4IC4gNCAtfX0KCnt7LSB3aXRoICRjZWxsLnZ0Y3RsZCAtfX0KCiMgZGVmaW5lIGltYWdlIHRvIHVzZQp7ey0gJHZpdGVzc1RhZyA6PSAudml0ZXNzVGFnIHwgZGVmYXVsdCAkZGVmYXVsdFZ0Y3RsZC52aXRlc3NUYWcgLX19Cnt7LSAkY2VsbENsZWFuIDo9IGluY2x1ZGUgImNsZWFuLWxhYmVsIiAkY2VsbC5uYW1lIH19CgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIHZ0Y3RsZCBTZXJ2aWNlCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCmtpbmQ6IFNlcnZpY2UKYXBpVmVyc2lvbjogdjEKbWV0YWRhdGE6CiAgbmFtZTogdnRjdGxkCiAgbGFiZWxzOgogICAgY29tcG9uZW50OiB2dGN0bGQKICAgIGFwcDogdml0ZXNzCnNwZWM6CiAgcG9ydHM6CiAgICAtIG5hbWU6IHdlYgogICAgICBwb3J0OiAxNTAwMAogICAgLSBuYW1lOiBncnBjCiAgICAgIHBvcnQ6IDE1OTk5CiAgc2VsZWN0b3I6CiAgICBjb21wb25lbnQ6IHZ0Y3RsZAogICAgYXBwOiB2aXRlc3MKICB0eXBlOiB7ey5zZXJ2aWNlVHlwZSB8IGRlZmF1bHQgJGRlZmF1bHRWdGN0bGQuc2VydmljZVR5cGV9fQotLS0KCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgdnRjdGxkIFNlcnZpY2VBY2NvdW50CiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IHZ0Y3RsZAogIGxhYmVsczoKICAgIGFwcDogdml0ZXNzCi0tLQoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyB2dGN0bGQgUm9sZUJpbmRpbmcKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiB2dGN0bGQtdG9wby1tZW1iZXIKcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IFJvbGUKICBuYW1lOiB2dC10b3BvLW1lbWJlcgpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IHZ0Y3RsZAogIG5hbWVzcGFjZToge3sgJG5hbWVzcGFjZSB9fQotLS0KCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgdnRjdGxkIFNlcnZpY2UgKyBEZXBsb3ltZW50CiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCmFwaVZlcnNpb246IGFwcHMvdjEKa2luZDogRGVwbG95bWVudAptZXRhZGF0YToKICBuYW1lOiB2dGN0bGQKc3BlYzoKICByZXBsaWNhczoge3sucmVwbGljYXMgfCBkZWZhdWx0ICRkZWZhdWx0VnRjdGxkLnJlcGxpY2FzfX0KICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHA6IHZpdGVzcwogICAgICBjb21wb25lbnQ6IHZ0Y3RsZAogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGxhYmVsczoKICAgICAgICBhcHA6IHZpdGVzcwogICAgICAgIGNvbXBvbmVudDogdnRjdGxkCiAgICBzcGVjOgogICAgICBzZXJ2aWNlQWNjb3VudE5hbWU6IHZ0Y3RsZAp7eyBpbmNsdWRlICJwb2Qtc2VjdXJpdHkiIC4gfCBpbmRlbnQgNiB9fQp7eyBpbmNsdWRlICJ2dGN0bGQtYWZmaW5pdHkiICh0dXBsZSAkY2VsbENsZWFuICRjZWxsLnJlZ2lvbikgfCBpbmRlbnQgNiB9fQogICAgICBjb250YWluZXJzOgogICAgICAgIC0gbmFtZTogdnRjdGxkCiAgICAgICAgICBpbWFnZTogdml0ZXNzL3Z0Y3RsZDp7eyR2aXRlc3NUYWd9fQogICAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiBJZk5vdFByZXNlbnQKICAgICAgICAgIHJlYWRpbmVzc1Byb2JlOgogICAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICAgIHBhdGg6IC9kZWJ1Zy9oZWFsdGgKICAgICAgICAgICAgICBwb3J0OiAxNTAwMAogICAgICAgICAgICBpbml0aWFsRGVsYXlTZWNvbmRzOiAzMAogICAgICAgICAgICB0aW1lb3V0U2Vjb25kczogNQogICAgICAgICAgbGl2ZW5lc3NQcm9iZToKICAgICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgICBwYXRoOiAvZGVidWcvc3RhdHVzCiAgICAgICAgICAgICAgcG9ydDogMTUwMDAKICAgICAgICAgICAgaW5pdGlhbERlbGF5U2Vjb25kczogMzAKICAgICAgICAgICAgdGltZW91dFNlY29uZHM6IDUKICAgICAgICAgIGVudjoKe3sgaW5jbHVkZSAiYmFja3VwLWVudiIgJGNvbmZpZy5iYWNrdXAgfCBpbmRlbnQgMTIgfX0KICAgICAgICAgIHZvbHVtZU1vdW50czoKe3sgaW5jbHVkZSAiYmFja3VwLXZvbHVtZU1vdW50IiAkY29uZmlnLmJhY2t1cCB8IGluZGVudCAxMiB9fQp7eyBpbmNsdWRlICJ1c2VyLXNlY3JldC12b2x1bWVNb3VudHMiICguc2VjcmV0cyB8IGRlZmF1bHQgJGRlZmF1bHRWdGN0bGQuc2VjcmV0cykgfCBpbmRlbnQgMTIgfX0KICAgICAgICAgIHJlc291cmNlczoKe3sgdG9ZYW1sICgucmVzb3VyY2VzIHwgZGVmYXVsdCAkZGVmYXVsdFZ0Y3RsZC5yZXNvdXJjZXMpIHwgaW5kZW50IDEyIH19CiAgICAgICAgICBjb21tYW5kOgogICAgICAgICAgICAtIGJhc2gKICAgICAgICAgICAgLSAiLWMiCiAgICAgICAgICAgIC0gfAogICAgICAgICAgICAgIHNldCAtZXg7Cgp7eyBpbmNsdWRlICJiYWNrdXAtZXhlYyIgJGNvbmZpZy5iYWNrdXAgfCBpbmRlbnQgMTQgfX0KCiAgICAgICAgICAgICAgZXZhbCBleGVjIC92dC9iaW4vdnRjdGxkICQoY2F0IDw8RU5EX09GX0NPTU1BTkQKICAgICAgICAgICAgICAgIC1jZWxsPXt7JGNlbGxDbGVhbiB8IHF1b3RlfX0KICAgICAgICAgICAgICAgIC13ZWJfZGlyPSIvdnQvd2ViL3Z0Y3RsZCIKICAgICAgICAgICAgICAgIC13ZWJfZGlyMj0iL3Z0L3dlYi92dGN0bGQyL2FwcCIKICAgICAgICAgICAgICAgIC13b3JrZmxvd19tYW5hZ2VyX2luaXQKICAgICAgICAgICAgICAgIC13b3JrZmxvd19tYW5hZ2VyX3VzZV9lbGVjdGlvbgogICAgICAgICAgICAgICAgLWxvZ3Rvc3RkZXJyPXRydWUKICAgICAgICAgICAgICAgIC1zdGRlcnJ0aHJlc2hvbGQ9MAogICAgICAgICAgICAgICAgLXBvcnQ9MTUwMDAKICAgICAgICAgICAgICAgIC1ncnBjX3BvcnQ9MTU5OTkKICAgICAgICAgICAgICAgIC1zZXJ2aWNlX21hcD0iZ3JwYy12dGN0bCIKICAgICAgICAgICAgICAgIC10b3BvX2dsb2JhbF9yb290PS92aXRlc3MvZ2xvYmFsCiAgICAgICAgICAgICAgICAtcHJveHlfdGFibGV0cz10cnVlCiAgICAgICAgICAgICAgICB7ey0gaWYgZXEgKCRjZWxsLnRvcG9sb2d5UHJvdmlkZXIgfCBkZWZhdWx0ICIiKSAiZXRjZDIiIH19CiAgICAgICAgICAgICAgICAtdG9wb19pbXBsZW1lbnRhdGlvbj0iZXRjZDIiCiAgICAgICAgICAgICAgICAtdG9wb19nbG9iYWxfc2VydmVyX2FkZHJlc3M9ImV0Y2QtZ2xvYmFsLWNsaWVudC57eyAkbmFtZXNwYWNlIH19OjIzNzkiCiAgICAgICAgICAgICAgICB7ey0gZWxzZSB9fQogICAgICAgICAgICAgICAgLXRvcG9faW1wbGVtZW50YXRpb249Ims4cyIKICAgICAgICAgICAgICAgIC10b3BvX2dsb2JhbF9zZXJ2ZXJfYWRkcmVzcz0iazhzIgogICAgICAgICAgICAgICAge3stIGVuZCB9fQp7eyBpbmNsdWRlICJiYWNrdXAtZmxhZ3MiICh0dXBsZSAkY29uZmlnLmJhY2t1cCAidnRjdGxkIikgfCBpbmRlbnQgMTYgfX0Ke3sgaW5jbHVkZSAiZm9ybWF0LWZsYWdzLWFsbCIgKHR1cGxlICRkZWZhdWx0VnRjdGxkLmV4dHJhRmxhZ3MgLmV4dHJhRmxhZ3MpIHwgaW5kZW50IDE2IH19CiAgICAgICAgICAgICAgRU5EX09GX0NPTU1BTkQKICAgICAgICAgICAgICApCgogICAgICB2b2x1bWVzOgp7eyBpbmNsdWRlICJiYWNrdXAtdm9sdW1lIiAkY29uZmlnLmJhY2t1cCB8IGluZGVudCA4IH19Cnt7IGluY2x1ZGUgInVzZXItc2VjcmV0LXZvbHVtZXMiICguc2VjcmV0cyB8IGRlZmF1bHQgJGRlZmF1bHRWdGN0bGQuc2VjcmV0cykgfCBpbmRlbnQgOCB9fQoKe3stIGVuZCAtfX0Ke3stIGVuZCAtfX0KCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgdnRjdGxkLWFmZmluaXR5IHNldHMgbm9kZS9wb2QgYWZmaW5pdGllcwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwp7eyBkZWZpbmUgInZ0Y3RsZC1hZmZpbml0eSIgLX19CiMgc2V0IHR1cGxlIHZhbHVlcyB0byBtb3JlIHJlY29nbml6YWJsZSB2YXJpYWJsZXMKe3stICRjZWxsQ2xlYW4gOj0gaW5kZXggLiAwIC19fQp7ey0gJHJlZ2lvbiA6PSBpbmRleCAuIDEgLX19Cgp7eyB3aXRoICRyZWdpb24gfX0KIyBhZmZpbml0eSBwb2Qgc3BlYwphZmZpbml0eToKe3sgaW5jbHVkZSAibm9kZS1hZmZpbml0eSIgJHJlZ2lvbiB8IGluZGVudCAyIH19Cnt7LSBlbmQgLX19Cgp7ey0gZW5kIC19fQo=
    name: templates/_vtctld.tpl
  - data: IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyB2dGdhdGUgU2VydmljZSArIERlcGxveW1lbnQKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKe3sgZGVmaW5lICJ2dGdhdGUiIC19fQojIHNldCB0dXBsZSB2YWx1ZXMgdG8gbW9yZSByZWNvZ25pemFibGUgdmFyaWFibGVzCnt7LSAkdG9wb2xvZ3kgOj0gaW5kZXggLiAwIC19fQp7ey0gJGNlbGwgOj0gaW5kZXggLiAxIC19fQp7ey0gJGRlZmF1bHRWdGdhdGUgOj0gaW5kZXggLiAyIC19fQp7ey0gJG5hbWVzcGFjZSA6PSBpbmRleCAuIDMgLX19Cgp7ey0gd2l0aCAkY2VsbC52dGdhdGUgLX19CgojIGRlZmluZSBpbWFnZSB0byB1c2UKe3stICR2aXRlc3NUYWcgOj0gLnZpdGVzc1RhZyB8IGRlZmF1bHQgJGRlZmF1bHRWdGdhdGUudml0ZXNzVGFnIC19fQp7ey0gJGNlbGxDbGVhbiA6PSBpbmNsdWRlICJjbGVhbi1sYWJlbCIgJGNlbGwubmFtZSB9fQoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyB2dGdhdGUgU2VydmljZQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwpraW5kOiBTZXJ2aWNlCmFwaVZlcnNpb246IHYxCm1ldGFkYXRhOgogIG5hbWU6IHZ0Z2F0ZS17eyAkY2VsbENsZWFuIH19CiAgbGFiZWxzOgogICAgY29tcG9uZW50OiB2dGdhdGUKICAgIGNlbGw6IHt7ICRjZWxsQ2xlYW4gfX0KICAgIGFwcDogdml0ZXNzCnNwZWM6CiAgcG9ydHM6CiAgICAtIG5hbWU6IHdlYgogICAgICBwb3J0OiAxNTAwMQogICAgLSBuYW1lOiBncnBjCiAgICAgIHBvcnQ6IDE1OTkxCnt7IGlmICRjZWxsLm15c3FsUHJvdG9jb2wuZW5hYmxlZCB9fQogICAgLSBuYW1lOiBteXNxbAogICAgICBwb3J0OiAzMzA2Cnt7IGVuZCB9fQogIHNlbGVjdG9yOgogICAgY29tcG9uZW50OiB2dGdhdGUKICAgIGNlbGw6IHt7ICRjZWxsQ2xlYW4gfX0KICAgIGFwcDogdml0ZXNzCiAgdHlwZToge3suc2VydmljZVR5cGUgfCBkZWZhdWx0ICRkZWZhdWx0VnRnYXRlLnNlcnZpY2VUeXBlfX0KLS0tCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIHZ0Z2F0ZSBTZXJ2aWNlQWNjb3VudAojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlQWNjb3VudAptZXRhZGF0YToKICBuYW1lOiB2dGdhdGUKICBsYWJlbHM6CiAgICBhcHA6IHZpdGVzcwotLS0KCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgdnRnYXRlIFJvbGVCaW5kaW5nCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogdnRnYXRlLXRvcG8tbWVtYmVyCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBSb2xlCiAgbmFtZTogdnQtdG9wby1tZW1iZXIKc3ViamVjdHM6Ci0ga2luZDogU2VydmljZUFjY291bnQKICBuYW1lOiB2dGdhdGUKICBuYW1lc3BhY2U6IHt7ICRuYW1lc3BhY2UgfX0KLS0tCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIHZ0Z2F0ZSBEZXBsb3ltZW50CiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCmFwaVZlcnNpb246IGFwcHMvdjEKa2luZDogRGVwbG95bWVudAptZXRhZGF0YToKICBuYW1lOiB2dGdhdGUte3sgJGNlbGxDbGVhbiB9fQpzcGVjOgogIHJlcGxpY2FzOiB7ey5yZXBsaWNhcyB8IGRlZmF1bHQgJGRlZmF1bHRWdGdhdGUucmVwbGljYXN9fQogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGFwcDogdml0ZXNzCiAgICAgIGNvbXBvbmVudDogdnRnYXRlCiAgICAgIGNlbGw6IHt7ICRjZWxsQ2xlYW4gfX0KICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgYXBwOiB2aXRlc3MKICAgICAgICBjb21wb25lbnQ6IHZ0Z2F0ZQogICAgICAgIGNlbGw6IHt7ICRjZWxsQ2xlYW4gfX0KICAgIHNwZWM6CiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogdnRnYXRlCnt7IGluY2x1ZGUgInBvZC1zZWN1cml0eSIgLiB8IGluZGVudCA2IH19Cnt7IGluY2x1ZGUgInZ0Z2F0ZS1hZmZpbml0eSIgKHR1cGxlICRjZWxsQ2xlYW4gJGNlbGwucmVnaW9uKSB8IGluZGVudCA2IH19Cgp7eyBpZiAkY2VsbC5teXNxbFByb3RvY29sLmVuYWJsZWQgfX0Ke3sgaWYgZXEgJGNlbGwubXlzcWxQcm90b2NvbC5hdXRoVHlwZSAic2VjcmV0IiB9fQogICAgICBpbml0Q29udGFpbmVyczoKe3sgaW5jbHVkZSAiaW5pdC1teXNxbC1jcmVkcyIgKHR1cGxlICR2aXRlc3NUYWcgJGNlbGwpIHwgaW5kZW50IDggfX0Ke3sgZW5kIH19Cnt7IGVuZCB9fQoKICAgICAgY29udGFpbmVyczoKICAgICAgICAtIG5hbWU6IHZ0Z2F0ZQogICAgICAgICAgaW1hZ2U6IHZpdGVzcy92dGdhdGU6e3skdml0ZXNzVGFnfX0KICAgICAgICAgIGltYWdlUHVsbFBvbGljeTogSWZOb3RQcmVzZW50CiAgICAgICAgICByZWFkaW5lc3NQcm9iZToKICAgICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgICBwYXRoOiAvZGVidWcvaGVhbHRoCiAgICAgICAgICAgICAgcG9ydDogMTUwMDEKICAgICAgICAgICAgaW5pdGlhbERlbGF5U2Vjb25kczogMzAKICAgICAgICAgICAgdGltZW91dFNlY29uZHM6IDUKICAgICAgICAgIGxpdmVuZXNzUHJvYmU6CiAgICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgICAgcGF0aDogL2RlYnVnL3N0YXR1cwogICAgICAgICAgICAgIHBvcnQ6IDE1MDAxCiAgICAgICAgICAgIGluaXRpYWxEZWxheVNlY29uZHM6IDMwCiAgICAgICAgICAgIHRpbWVvdXRTZWNvbmRzOiA1CiAgICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgICAgIC0gbmFtZTogY3JlZHMKICAgICAgICAgICAgICBtb3VudFBhdGg6ICIvbXlzcWxjcmVkcyIKe3sgaW5jbHVkZSAidXNlci1zZWNyZXQtdm9sdW1lTW91bnRzIiAoLnNlY3JldHMgfCBkZWZhdWx0ICRkZWZhdWx0VnRnYXRlLnNlY3JldHMpIHwgaW5kZW50IDEyIH19CiAgICAgICAgICByZXNvdXJjZXM6Cnt7IHRvWWFtbCAoLnJlc291cmNlcyB8IGRlZmF1bHQgJGRlZmF1bHRWdGdhdGUucmVzb3VyY2VzKSB8IGluZGVudCAxMiB9fQoKICAgICAgICAgIGNvbW1hbmQ6CiAgICAgICAgICAgIC0gYmFzaAogICAgICAgICAgICAtICItYyIKICAgICAgICAgICAgLSB8CiAgICAgICAgICAgICAgc2V0IC1leAoKICAgICAgICAgICAgICBldmFsIGV4ZWMgL3Z0L2Jpbi92dGdhdGUgJChjYXQgPDxFTkRfT0ZfQ09NTUFORAogICAgICAgICAgICAgICAgLXRvcG9fZ2xvYmFsX3Jvb3Q9L3ZpdGVzcy9nbG9iYWwKICAgICAgICAgICAgICAgIHt7LSBpZiBlcSAoJGNlbGwudG9wb2xvZ3lQcm92aWRlciB8IGRlZmF1bHQgIiIpICJldGNkMiIgfX0KICAgICAgICAgICAgICAgIC10b3BvX2ltcGxlbWVudGF0aW9uPWV0Y2QyCiAgICAgICAgICAgICAgICAtdG9wb19nbG9iYWxfc2VydmVyX2FkZHJlc3M9ImV0Y2QtZ2xvYmFsLWNsaWVudC57eyAkbmFtZXNwYWNlIH19OjIzNzkiCiAgICAgICAgICAgICAgICB7ey0gZWxzZSB9fQogICAgICAgICAgICAgICAgLXRvcG9faW1wbGVtZW50YXRpb249Ims4cyIKICAgICAgICAgICAgICAgIC10b3BvX2dsb2JhbF9zZXJ2ZXJfYWRkcmVzcz0iazhzIgogICAgICAgICAgICAgICAge3stIGVuZCB9fQogICAgICAgICAgICAgICAgLWxvZ3Rvc3RkZXJyPXRydWUKICAgICAgICAgICAgICAgIC1zdGRlcnJ0aHJlc2hvbGQ9MAogICAgICAgICAgICAgICAgLXBvcnQ9MTUwMDEKICAgICAgICAgICAgICAgIC1ncnBjX3BvcnQ9MTU5OTEKe3sgaWYgJGNlbGwubXlzcWxQcm90b2NvbC5lbmFibGVkIH19CiAgICAgICAgICAgICAgICAtbXlzcWxfc2VydmVyX3BvcnQ9MzMwNgp7eyBpZiBlcSAkY2VsbC5teXNxbFByb3RvY29sLmF1dGhUeXBlICJzZWNyZXQiIH19CiAgICAgICAgICAgICAgICAtbXlzcWxfYXV0aF9zZXJ2ZXJfaW1wbD0ic3RhdGljIgogICAgICAgICAgICAgICAgLW15c3FsX2F1dGhfc2VydmVyX3N0YXRpY19maWxlPSIvbXlzcWxjcmVkcy9jcmVkcy5qc29uIgp7eyBlbHNlIGlmIGVxICRjZWxsLm15c3FsUHJvdG9jb2wuYXV0aFR5cGUgIm5vbmUiIH19CiAgICAgICAgICAgICAgICAtbXlzcWxfYXV0aF9zZXJ2ZXJfaW1wbD0ibm9uZSIKe3sgZW5kIH19Cnt7IGVuZCB9fQogICAgICAgICAgICAgICAgLXNlcnZpY2VfbWFwPSJncnBjLXZ0Z2F0ZXNlcnZpY2UiCiAgICAgICAgICAgICAgICAtY2VsbHNfdG9fd2F0Y2g9e3skY2VsbC5uYW1lIHwgcXVvdGV9fQogICAgICAgICAgICAgICAgLXRhYmxldF90eXBlc190b193YWl0PSJNQVNURVIsUkVQTElDQSIKICAgICAgICAgICAgICAgIC1nYXRld2F5X2ltcGxlbWVudGF0aW9uPSJkaXNjb3ZlcnlnYXRld2F5IgogICAgICAgICAgICAgICAgLWNlbGw9e3skY2VsbC5uYW1lIHwgcXVvdGV9fQp7eyBpbmNsdWRlICJmb3JtYXQtZmxhZ3MtYWxsIiAodHVwbGUgJGRlZmF1bHRWdGdhdGUuZXh0cmFGbGFncyAuZXh0cmFGbGFncykgfCBpbmRlbnQgMTYgfX0KICAgICAgICAgICAgICBFTkRfT0ZfQ09NTUFORAogICAgICAgICAgICAgICkKICAgICAgdm9sdW1lczoKICAgICAgICAtIG5hbWU6IGNyZWRzCiAgICAgICAgICBlbXB0eURpcjoge30Ke3sgaW5jbHVkZSAidXNlci1zZWNyZXQtdm9sdW1lcyIgKC5zZWNyZXRzIHwgZGVmYXVsdCAkZGVmYXVsdFZ0Z2F0ZS5zZWNyZXRzKSB8IGluZGVudCA4IH19Ci0tLQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIHZ0Z2F0ZSBQb2REaXNydXB0aW9uQnVkZ2V0CiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCmFwaVZlcnNpb246IHBvbGljeS92MWJldGExCmtpbmQ6IFBvZERpc3J1cHRpb25CdWRnZXQKbWV0YWRhdGE6CiAgbmFtZTogdnRnYXRlLXt7ICRjZWxsQ2xlYW4gfX0Kc3BlYzoKICBtYXhVbmF2YWlsYWJsZTogMQogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGFwcDogdml0ZXNzCiAgICAgIGNvbXBvbmVudDogdnRnYXRlCiAgICAgIGNlbGw6IHt7ICRjZWxsQ2xlYW4gfX0KCnt7ICRtYXhSZXBsaWNhcyA6PSAubWF4UmVwbGljYXMgfCBkZWZhdWx0IC5yZXBsaWNhcyB9fQp7eyBpZiBndCAkbWF4UmVwbGljYXMgLnJlcGxpY2FzIH19CiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgb3B0aW9uYWwgSFBBIGZvciB2dGdhdGUKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKLS0tCmFwaVZlcnNpb246IGF1dG9zY2FsaW5nL3YyYmV0YTEKa2luZDogSG9yaXpvbnRhbFBvZEF1dG9zY2FsZXIKbWV0YWRhdGE6CiAgbmFtZTogdnRnYXRlLXt7ICRjZWxsQ2xlYW4gfX0Kc3BlYzoKICBzY2FsZVRhcmdldFJlZjoKICAgIGFwaVZlcnNpb246IGFwcHMvdjEKICAgIGtpbmQ6IERlcGxveW1lbnQKICAgIG5hbWU6IHZ0Z2F0ZS17eyAkY2VsbENsZWFuIH19CiAgbWluUmVwbGljYXM6IHt7IC5yZXBsaWNhcyB9fQogIG1heFJlcGxpY2FzOiB7eyAkbWF4UmVwbGljYXMgfX0KICBtZXRyaWNzOgogIC0gdHlwZTogUmVzb3VyY2UKICAgIHJlc291cmNlOgogICAgICBuYW1lOiBjcHUKICAgICAgdGFyZ2V0QXZlcmFnZVV0aWxpemF0aW9uOiA3MAp7ey0gZW5kIC19fQoKe3stIGVuZCAtfX0Ke3stIGVuZCAtfX0KCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgdnRnYXRlLWFmZmluaXR5IHNldHMgbm9kZS9wb2QgYWZmaW5pdGllcwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwp7eyBkZWZpbmUgInZ0Z2F0ZS1hZmZpbml0eSIgLX19CiMgc2V0IHR1cGxlIHZhbHVlcyB0byBtb3JlIHJlY29nbml6YWJsZSB2YXJpYWJsZXMKe3stICRjZWxsQ2xlYW4gOj0gaW5kZXggLiAwIC19fQp7ey0gJHJlZ2lvbiA6PSBpbmRleCAuIDEgfX0KCiMgYWZmaW5pdHkgcG9kIHNwZWMKYWZmaW5pdHk6Cnt7IGluY2x1ZGUgIm5vZGUtYWZmaW5pdHkiICRyZWdpb24gfCBpbmRlbnQgMiB9fQoKICBwb2RBZmZpbml0eToKICAgIHByZWZlcnJlZER1cmluZ1NjaGVkdWxpbmdJZ25vcmVkRHVyaW5nRXhlY3V0aW9uOgogICAgIyBwcmVmZXIgdG8gYmUgc2NoZWR1bGVkIHdpdGggc2FtZS1jZWxsIHZ0dGFibGV0cwogICAgLSB3ZWlnaHQ6IDEwCiAgICAgIHBvZEFmZmluaXR5VGVybToKICAgICAgICB0b3BvbG9neUtleToga3ViZXJuZXRlcy5pby9ob3N0bmFtZQogICAgICAgIGxhYmVsU2VsZWN0b3I6CiAgICAgICAgICBtYXRjaExhYmVsczoKICAgICAgICAgICAgYXBwOiAidml0ZXNzIgogICAgICAgICAgICBjb21wb25lbnQ6ICJ2dHRhYmxldCIKICAgICAgICAgICAgY2VsbDoge3sgJGNlbGxDbGVhbiB8IHF1b3RlIH19CgogIHBvZEFudGlBZmZpbml0eToKICAgIHByZWZlcnJlZER1cmluZ1NjaGVkdWxpbmdJZ25vcmVkRHVyaW5nRXhlY3V0aW9uOgogICAgIyBwcmVmZXIgdG8gc3RheSBhd2F5IGZyb20gb3RoZXIgc2FtZS1jZWxsIHZ0Z2F0ZXMKICAgIC0gd2VpZ2h0OiAxMAogICAgICBwb2RBZmZpbml0eVRlcm06CiAgICAgICAgdG9wb2xvZ3lLZXk6IGt1YmVybmV0ZXMuaW8vaG9zdG5hbWUKICAgICAgICBsYWJlbFNlbGVjdG9yOgogICAgICAgICAgbWF0Y2hMYWJlbHM6CiAgICAgICAgICAgIGFwcDogInZpdGVzcyIKICAgICAgICAgICAgY29tcG9uZW50OiAidnRnYXRlIgogICAgICAgICAgICBjZWxsOiB7eyAkY2VsbENsZWFuIHwgcXVvdGUgfX0KCnt7LSBlbmQgLX19CgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIGluaXQtY29udGFpbmVyIHRvIHNldCBteXNxbCBjcmVkZW50aWFscyBmaWxlCiMgaXQgbG9vcHMgdGhyb3VnaCB0aGUgdXNlcnMgYW5kIHB1bGxzIG91dCB0aGVpcgojIHJlc3BlY3RpdmUgcGFzc3dvcmRzIGZyb20gbW91bnRlZCBzZWNyZXRzCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCnt7IGRlZmluZSAiaW5pdC1teXNxbC1jcmVkcyIgLX19Cnt7LSAkdml0ZXNzVGFnIDo9IGluZGV4IC4gMCAtfX0Ke3stICRjZWxsIDo9IGluZGV4IC4gMSAtfX0KCnt7LSB3aXRoICRjZWxsLm15c3FsUHJvdG9jb2wgfX0KCi0gbmFtZTogaW5pdC1teXNxbC1jcmVkcwogIGltYWdlOiAidml0ZXNzL3Z0Z2F0ZTp7eyR2aXRlc3NUYWd9fSIKICBpbWFnZVB1bGxQb2xpY3k6IElmTm90UHJlc2VudAogIHZvbHVtZU1vdW50czoKICAgIC0gbmFtZTogY3JlZHMKICAgICAgbW91bnRQYXRoOiAiL215c3FsY3JlZHMiCiAgZW52OgogICAgLSBuYW1lOiBNWVNRTF9QQVNTV09SRAogICAgICB2YWx1ZUZyb206CiAgICAgICAgc2VjcmV0S2V5UmVmOgogICAgICAgICAgbmFtZToge3sgLnBhc3N3b3JkU2VjcmV0IH19CiAgICAgICAgICBrZXk6IHBhc3N3b3JkCgogIGNvbW1hbmQ6IFsiYmFzaCJdCiAgYXJnczoKICAgIC0gIi1jIgogICAgLSB8CiAgICAgIHNldCAtZXgKICAgICAgY3JlZHM9JChjYXQgPDxFTkRfT0ZfQ09NTUFORAogICAgICB7CiAgICAgICAgInt7IC51c2VybmFtZSB9fSI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIlVzZXJEYXRhIjogInt7IC51c2VybmFtZSB9fSIsCiAgICAgICAgICAgICJQYXNzd29yZCI6ICIkTVlTUUxfUEFTU1dPUkQiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAidnRfYXBwZGVidWciOiBbXQogICAgICB9CiAgICAgIEVORF9PRl9DT01NQU5ECiAgICAgICkKICAgICAgZWNobyAkY3JlZHMgPiAvbXlzcWxjcmVkcy9jcmVkcy5qc29uCgp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQo=
    name: templates/_vtgate.tpl
  - data: 
    name: templates/_vttablet.tpl
  - data: IyBDcmVhdGUgZ2xvYmFsIHJlc291cmNlcy4KLS0tCiMgQ3JlYXRlIHJvbGUgZm9yIHRvcG9sb2d5IGNyZAphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IFJvbGUKbWV0YWRhdGE6CiAgbmFtZTogdnQtdG9wby1tZW1iZXIKcnVsZXM6Ci0gYXBpR3JvdXBzOgogIC0gdG9wby52aXRlc3MuaW8KICByZXNvdXJjZXM6CiAgLSB2aXRlc3N0b3Bvbm9kZXMKICB2ZXJiczoKICAtICcqJwoKLS0tCgojIGNyZWF0ZSBhIHNpbmdsZSB2dHRhYmxldCBzZXJ2aWNlCnt7IGluY2x1ZGUgInZ0dGFibGV0LXNlcnZpY2UiICh0dXBsZSAkLlZhbHVlcy5wbW0pIH19CgojIGNyZWF0ZSBhIHNpbmdsZSB2dHRhYmxldCBzZXJ2aWNlYWNjb3VudAp7eyBpbmNsdWRlICJ2dHRhYmxldC1zZXJ2aWNlYWNjb3VudCIgKHR1cGxlICQuUmVsZWFzZS5OYW1lc3BhY2UpIH19CgojIGNyZWF0ZSBhIHNpbmdsZSB2dHRhYmxldCByb2xlYmluZGluZwp7eyBpZiBlcSAkLlZhbHVlcy50b3BvbG9neS5nbG9iYWxDZWxsLnRvcG9sb2d5UHJvdmlkZXIgIms4cyIgfX0Ke3sgaW5jbHVkZSAidnR0YWJsZXQtdG9wby1yb2xlLWJpbmRpbmciICh0dXBsZSAkLlJlbGVhc2UuTmFtZXNwYWNlKSB9fQp7eyBlbmQgfX0KLS0tCnt7IGlmICQuVmFsdWVzLnBtbS5lbmFibGVkIH19CiMgY3JlYXRlIHRoZSBwbW0gc2VydmljZSBhbmQgc3RhdGVmdWwgc2V0Cnt7IGluY2x1ZGUgInBtbSIgKHR1cGxlICQuVmFsdWVzLnBtbSAkLlJlbGVhc2UuTmFtZXNwYWNlKSB9fQotLS0Ke3sgZW5kIH19Cgp7eyBpZiAkLlZhbHVlcy5vcmNoZXN0cmF0b3IuZW5hYmxlZCB9fQoKIyBjcmVhdGUgb3JjaGVzdHJhdG9yIGdsb2JhbCBzZXJ2aWNlcyBhbmQgU3RhdGVmdWxTZXQKe3sgaW5jbHVkZSAib3JjaGVzdHJhdG9yIiAodHVwbGUgJC5WYWx1ZXMub3JjaGVzdHJhdG9yICQuVmFsdWVzLnZ0Y3RsY2xpZW50KSB9fQotLS0KIyBjcmVhdGUgb3JjaGVzdHJhdG9yIGNvbmZpZyBtYXAKe3sgaW5jbHVkZSAib3JjaGVzdHJhdG9yLWNvbmZpZyIgKHR1cGxlICQuVmFsdWVzLm9yY2hlc3RyYXRvciAkLlJlbGVhc2UuTmFtZXNwYWNlICQuVmFsdWVzLnZ0dGFibGV0LmVuYWJsZUhlYXJ0YmVhdCAkLlZhbHVlcy52dGN0bGNsaWVudCkgfX0KLS0tCiMgY3JlYXRlIGEgU2VydmljZSBwZXIgU3RhdGVmdWxTZXQgcmVwbGljYQp7eyByYW5nZSAkaSA6PSB1bnRpbCAoaW50ICQuVmFsdWVzLm9yY2hlc3RyYXRvci5yZXBsaWNhcykgfX0Ke3sgaW5jbHVkZSAib3JjaGVzdHJhdG9yLXN0YXRlZnVsc2V0LXNlcnZpY2UiICh0dXBsZSAkLlZhbHVlcy5vcmNoZXN0cmF0b3IgJGkpIH19Ci0tLQp7eyBlbmQgfX0KCnt7IGVuZCB9fQoKe3sgaWYgZXEgJC5WYWx1ZXMudG9wb2xvZ3kuZ2xvYmFsQ2VsbC50b3BvbG9neVByb3ZpZGVyICJldGNkMiIgfX0KIyBjcmVhdGUgYW4gZXRjZCBjbHVzdGVyIGZvciB0aGUgZ2xvYmFsIHRvcG9sb2d5Cnt7LSAkcmVwbGljYXMgOj0gJC5WYWx1ZXMudG9wb2xvZ3kuZ2xvYmFsQ2VsbC5yZXBsaWNhcyB8IGRlZmF1bHQgJC5WYWx1ZXMuZXRjZC5yZXBsaWNhcyAtfX0Ke3stICR2ZXJzaW9uIDo9ICQuVmFsdWVzLnRvcG9sb2d5Lmdsb2JhbENlbGwudmVyc2lvbiB8IGRlZmF1bHQgJC5WYWx1ZXMuZXRjZC52ZXJzaW9uIC19fQp7ey0gJHJlc291cmNlcyA6PSAkLlZhbHVlcy50b3BvbG9neS5nbG9iYWxDZWxsLnJlc291cmNlcyB8IGRlZmF1bHQgJC5WYWx1ZXMuZXRjZC5yZXNvdXJjZXMgLX19Cnt7LSAkY2x1c3RlcldpZGUgOj0gJC5WYWx1ZXMudG9wb2xvZ3kuZ2xvYmFsQ2VsbC5yZXNvdXJjZXMgfCBkZWZhdWx0ICQuVmFsdWVzLmV0Y2QuY2x1c3RlcldpZGUgLX19Cgp7eyBpbmNsdWRlICJldGNkIiAodHVwbGUgImdsb2JhbCIgJHJlcGxpY2FzICR2ZXJzaW9uICRyZXNvdXJjZXMgJGNsdXN0ZXJXaWRlKSB9fQp7eyBlbmQgfX0KCiMgQ3JlYXRlIHJlcXVlc3RlZCByZXNvdXJjZXMgaW4gZWFjaCBjZWxsLgp7eyByYW5nZSAkY2VsbCA6PSAkLlZhbHVlcy50b3BvbG9neS5jZWxscyB9fQoKe3sgaWYgZXEgKCRjZWxsLnRvcG9sb2d5UHJvdmlkZXIgfCBkZWZhdWx0ICIiKSAiZXRjZDIiIH19Ci0tLQojIGNyZWF0ZSBhbiBldGNkIGNsdXN0ZXIgcGVyIGNlbGwKe3stICRjZWxsQ2xlYW4gOj0gaW5jbHVkZSAiY2xlYW4tbGFiZWwiICRjZWxsLm5hbWUgLX19Cnt7LSAkcmVwbGljYXMgOj0gJGNlbGwuZXRjZC5yZXBsaWNhcyB8IGRlZmF1bHQgJC5WYWx1ZXMuZXRjZC5yZXBsaWNhcyAtfX0Ke3stICR2ZXJzaW9uIDo9ICRjZWxsLmV0Y2QudmVyc2lvbiB8IGRlZmF1bHQgJC5WYWx1ZXMuZXRjZC52ZXJzaW9uIC19fQp7ey0gJHJlc291cmNlcyA6PSAkY2VsbC5ldGNkLnJlc291cmNlcyB8IGRlZmF1bHQgJC5WYWx1ZXMuZXRjZC5yZXNvdXJjZXMgLX19Cnt7LSAkY2x1c3RlcldpZGUgOj0gJGNlbGwuZXRjZC5jbHVzdGVyV2lkZSB8IGRlZmF1bHQgJC5WYWx1ZXMuZXRjZC5jbHVzdGVyV2lkZSAtfX0KCnt7IGluY2x1ZGUgImV0Y2QiICh0dXBsZSAkY2VsbENsZWFuICRyZXBsaWNhcyAkdmVyc2lvbiAkcmVzb3VyY2VzICRjbHVzdGVyV2lkZSkgfX0Ke3sgZW5kIH19CgotLS0KIyBjcmVhdGUgb25lIGNvbnRyb2xsZXIgcGVyIGNlbGwKe3sgaW5jbHVkZSAidnRjdGxkIiAodHVwbGUgJC5WYWx1ZXMudG9wb2xvZ3kgJGNlbGwgJC5WYWx1ZXMudnRjdGxkICQuUmVsZWFzZS5OYW1lc3BhY2UgJC5WYWx1ZXMuY29uZmlnKSB9fQotLS0KIyBjcmVhdGUgYSBwb29sIG9mIHZ0Z2F0ZXMgcGVyIGNlbGwKe3sgaW5jbHVkZSAidnRnYXRlIiAodHVwbGUgJC5WYWx1ZXMudG9wb2xvZ3kgJGNlbGwgJC5WYWx1ZXMudnRnYXRlICQuUmVsZWFzZS5OYW1lc3BhY2UpIH19CgogICMgVGFibGV0cyBmb3Iga2V5c3BhY2VzCiAge3sgcmFuZ2UgJGtleXNwYWNlIDo9ICRjZWxsLmtleXNwYWNlcyB9fQoKICAgICMgS2V5c3BhY2UgaW5pdGlhbGl6YXRpb25zCiAgICB7eyBpbmNsdWRlICJrZXlzcGFjZSIgKHR1cGxlICRjZWxsICRrZXlzcGFjZSAkLlZhbHVlcy52dGN0bGNsaWVudCAkLlJlbGVhc2UuTmFtZXNwYWNlKSB9fQoKICAgIHt7IHJhbmdlICRzaGFyZCA6PSAka2V5c3BhY2Uuc2hhcmRzIH19CgogICAgICB7eyAkdG90YWxUYWJsZXRDb3VudCA6PSBsZW4gKGluY2x1ZGUgInRhYmxldC1jb3VudCIgJHNoYXJkLnRhYmxldHMpIH19CiAgICAgICMgU2hhcmQgaW5pdGlhbGl6YXRpb25zCiAgICAgIHt7IGluY2x1ZGUgInNoYXJkIiAodHVwbGUgJGNlbGwgJGtleXNwYWNlICRzaGFyZCAkLlZhbHVlcy52dGN0bGNsaWVudCAkLlJlbGVhc2UuTmFtZXNwYWNlICR0b3RhbFRhYmxldENvdW50KSB9fQoKICAgICAgIyBUYWJsZXQgaW5pdGlhbGl6YXRpb25zCiAgICAgIHt7IHJhbmdlICR0YWJsZXQgOj0gJHNoYXJkLnRhYmxldHMgfX0KICAgICAgICB7eyBpbmNsdWRlICJ2dHRhYmxldCIgKHR1cGxlICQuVmFsdWVzLnRvcG9sb2d5ICRjZWxsICRrZXlzcGFjZSAkc2hhcmQgJHRhYmxldCAkLlZhbHVlcy52dHRhYmxldCAkLlZhbHVlcy52dGN0bGNsaWVudCAkLlJlbGVhc2UuTmFtZXNwYWNlICQuVmFsdWVzLmNvbmZpZyAkLlZhbHVlcy5wbW0gJC5WYWx1ZXMub3JjaGVzdHJhdG9yKSB9fQogICAgICB7eyBlbmQgfX0gIyByYW5nZSAkdGFibGV0CiAgICB7eyBlbmQgfX0gIyByYW5nZSAkc2hhcmQKICB7eyBlbmQgfX0gIyByYW5nZSAka2V5c3BhY2UKCnt7IGVuZCB9fSAjIHJhbmdlICRjZWxsCgp7eyByYW5nZSAkam9iIDo9ICQuVmFsdWVzLmpvYnMgfX0KICB7eyBpZiBlcSAkam9iLmtpbmQgInZ0Y3RsY2xpZW50IiB9fQogICAge3sgaW5jbHVkZSAidnRjdGxjbGllbnQtam9iIiAodHVwbGUgJGpvYiAkLlZhbHVlcy52dGN0bGNsaWVudCAkLlJlbGVhc2UuTmFtZXNwYWNlKSB9fQogIHt7IGVsc2UgfX0KICAgIHt7IHJhbmdlICRjZWxsIDo9ICQuVmFsdWVzLnRvcG9sb2d5LmNlbGxzIH19CiAgICAgIHt7IGlmIGVxICRjZWxsLm5hbWUgJGpvYi5jZWxsIH19CiAgICAgICAge3sgaW5jbHVkZSAidnR3b3JrZXItam9iIiAodHVwbGUgJGpvYiAkLlZhbHVlcy52dHdvcmtlciAkLlJlbGVhc2UuTmFtZXNwYWNlICRjZWxsKSB9fQogICAgICB7eyBlbmQgfX0KICAgIHt7IGVuZCB9fQogIHt7IGVuZCB9fQp7eyBlbmQgfX0KLS0tCnt7IHdpdGggJC5WYWx1ZXMuY29uZmlnIH19CiMgc2hhcmVkIENvbmZpZ01hcAphcGlWZXJzaW9uOiB2MQpraW5kOiBDb25maWdNYXAKbWV0YWRhdGE6CiAgbmFtZTogdml0ZXNzLWNtCmRhdGE6CiAgYmFja3VwLmJhY2t1cF9zdG9yYWdlX2ltcGxlbWVudGF0aW9uOiB7eyAuYmFja3VwLmJhY2t1cF9zdG9yYWdlX2ltcGxlbWVudGF0aW9uIH19CiAgYmFja3VwLmdjc19iYWNrdXBfc3RvcmFnZV9idWNrZXQ6IHt7IC5iYWNrdXAuZ2NzX2JhY2t1cF9zdG9yYWdlX2J1Y2tldCB9fQogIGJhY2t1cC5nY3NfYmFja3VwX3N0b3JhZ2Vfcm9vdDoge3sgLmJhY2t1cC5nY3NfYmFja3VwX3N0b3JhZ2Vfcm9vdCB9fQogIGJhY2t1cC5zM19iYWNrdXBfYXdzX3JlZ2lvbjoge3sgLmJhY2t1cC5zM19iYWNrdXBfYXdzX3JlZ2lvbiB9fQogIGJhY2t1cC5zM19iYWNrdXBfc3RvcmFnZV9idWNrZXQ6IHt7IC5iYWNrdXAuczNfYmFja3VwX3N0b3JhZ2VfYnVja2V0IH19CiAgYmFja3VwLnMzX2JhY2t1cF9zdG9yYWdlX3Jvb3Q6IHt7IC5iYWNrdXAuczNfYmFja3VwX3N0b3JhZ2Vfcm9vdCB9fQogIGJhY2t1cC5zM19iYWNrdXBfc2VydmVyX3NpZGVfZW5jcnlwdGlvbjoge3sgLmJhY2t1cC5zM19iYWNrdXBfc2VydmVyX3NpZGVfZW5jcnlwdGlvbiB9fQoKICBkYi5mbGF2b3I6IHt7ICQuVmFsdWVzLnZ0dGFibGV0LmZsYXZvciB9fQp7eyBlbmQgfX0gIyBlbmQgd2l0aCBjb25maWcK
    name: templates/vitess.yaml
  values:
    config:
      backup:
        backup_storage_implementation: gcs
        cron:
          schedule: 0 0 * * *
          suspend: false
        enabled: false
        gcs_backup_storage_bucket: vitess-backups
        gcs_backup_storage_root: vtbackups
        gcsSecret: vitess-gcs-creds
        s3_backup_aws_region: us-east-1
        s3_backup_server_side_encryption: AES256
        s3_backup_storage_bucket: vitess-backups
        s3_backup_storage_root: vtbackups
        s3Secret: vitess-s3-creds
    etcd:
      replicas: 3
      resources:
        requests:
          cpu: 200m
          memory: 100Mi
      version: 3.3.10
    jobs: null
    orchestrator:
      enabled: false
      image: vitess/orchestrator:3.1.1
      replicas: 3
      resources:
        requests:
          cpu: 50m
          memory: 350Mi
    pmm:
      client:
        resources:
          requests:
            cpu: 50m
            memory: 128Mi
      enabled: false
      pmmTag: 1.17.0
      server:
        dataVolumeClaimAnnotations: null
        dataVolumeClaimSpec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 10Gi
        env:
          disableTelemetry: true
          metricsMemory: "600000"
          metricsResolution: 1s
          metricsRetention: 720h
          queriesRetention: 8
        resources: null
    topology:
      cells:
      - etcd:
          replicas: 3
        mysqlProtocol:
          authType: secret
          enabled: false
        name: vitess-cluster-wp
        topologyProvider: k8s
        vtctld:
          replicas: 3
        vtgate:
          replicas: 1
      deploymentType: prod
      globalCell:
        etcd:
          replicas: 3
        topologyProvider: k8s
    vtctlclient:
      extraFlags: {}
      secrets: []
      vitessTag: helm-2.0.2-0
    vtctld:
      extraFlags: {}
      resources: null
      secrets: []
      serviceType: ClusterIP
      vitessTag: helm-2.0.2-0
    vtgate:
      extraFlags:
        mysql_server_version: 5.7.9-Vitess
      resources: null
      secrets: []
      serviceType: ClusterIP
      vitessTag: helm-2.0.2-0
    vttablet:
      dataVolumeClaimAnnotations: null
      dataVolumeClaimSpec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
      enableHeartbeat: false
      enableSemisync: false
      extraFlags:
        app_pool_size: 40
        dba_pool_size: 20
        queryserver-config-max-result-size: 10000
        queryserver-config-pool-size: 24
        queryserver-config-query-timeout: 30
        queryserver-config-stream-pool-size: 100
        queryserver-config-transaction-cap: 300
      extraMyCnf: ""
      flavor: mysql56
      mysqlImage: percona:5.7.26
      mysqlResources: null
      mysqlSize: prod
      resources: null
      secrets: []
      useKeyspaceNameAsDbName: true
      vitessTag: helm-2.0.2-0
    vtworker:
      extraFlags: {}
      resources: null
      secrets: []
      vitessTag: helm-2.0.2-0
info:
  deleted: ""
  description: Install complete
  first_deployed: "2020-08-28T02:40:12.90078049+02:00"
  last_deployed: "2020-08-28T02:40:12.90078049+02:00"
  notes: |+
    Release name: vitess

    To access administrative web pages, start a proxy with:
      kubectl proxy --port=8001

    Then use the following URLs:

          vtctld: http://localhost:8001/api/v1/namespaces/default/services/vtctld:web/proxy/app/
          vtgate: http://localhost:8001/api/v1/namespaces/default/services/vtgate-vitess-cluster-wp:web/proxy/


  status: deployed
manifest: "---\n# Source: vitess/templates/vitess.yaml\n###################################\n#
  vtgate PodDisruptionBudget\n###################################\napiVersion: policy/v1beta1\nkind:
  PodDisruptionBudget\nmetadata:\n  name: vtgate-vitess-cluster-wp\nspec:\n  maxUnavailable:
  1\n  selector:\n    matchLabels:\n      app: vitess\n      component: vtgate\n      cell:
  vitess-cluster-wp\n\n\n\n\n  # Tablets for keyspaces\n   # range $keyspace\n\n #
  range $cell\n---\n# Source: vitess/templates/vitess.yaml\n# create a single vttablet
  serviceaccount\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: vttablet\n
  \ labels:\n    app: vitess\n---\n# Source: vitess/templates/vitess.yaml\n###################################\n#
  vtctld ServiceAccount\n###################################\napiVersion: v1\nkind:
  ServiceAccount\nmetadata:\n  name: vtctld\n  labels:\n    app: vitess\n---\n# Source:
  vitess/templates/vitess.yaml\n###################################\n# vtgate ServiceAccount\n###################################\napiVersion:
  v1\nkind: ServiceAccount\nmetadata:\n  name: vtgate\n  labels:\n    app: vitess\n---\n#
  Source: vitess/templates/vitess.yaml\n# shared ConfigMap\napiVersion: v1\nkind:
  ConfigMap\nmetadata:\n  name: vitess-cm\ndata:\n  backup.backup_storage_implementation:
  gcs\n  backup.gcs_backup_storage_bucket: vitess-backups\n  backup.gcs_backup_storage_root:
  vtbackups\n  backup.s3_backup_aws_region: us-east-1\n  backup.s3_backup_storage_bucket:
  vitess-backups\n  backup.s3_backup_storage_root: vtbackups\n  backup.s3_backup_server_side_encryption:
  AES256\n\n  db.flavor: mysql56\n # end with config\n---\n# Source: vitess/templates/vitess.yaml\n#
  Create role for topology crd\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n
  \ name: vt-topo-member\nrules:\n- apiGroups:\n  - topo.vitess.io\n  resources:\n
  \ - vitesstoponodes\n  verbs:\n  - '*'\n---\n# Source: vitess/templates/vitess.yaml\n#
  create a single vttablet rolebinding\n\napiVersion: rbac.authorization.k8s.io/v1\nkind:
  RoleBinding\nmetadata:\n  name: vttablet-topo-member\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n
  \ kind: Role\n  name: vt-topo-member\nsubjects:\n- kind: ServiceAccount\n  name:
  vttablet\n  namespace: default\n---\n# Source: vitess/templates/vitess.yaml\n###################################\n#
  vtctld RoleBinding\n###################################\napiVersion: rbac.authorization.k8s.io/v1\nkind:
  RoleBinding\nmetadata:\n  name: vtctld-topo-member\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n
  \ kind: Role\n  name: vt-topo-member\nsubjects:\n- kind: ServiceAccount\n  name:
  vtctld\n  namespace: default\n---\n# Source: vitess/templates/vitess.yaml\n###################################\n#
  vtgate RoleBinding\n###################################\napiVersion: rbac.authorization.k8s.io/v1\nkind:
  RoleBinding\nmetadata:\n  name: vtgate-topo-member\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n
  \ kind: Role\n  name: vt-topo-member\nsubjects:\n- kind: ServiceAccount\n  name:
  vtgate\n  namespace: default\n---\n# Source: vitess/templates/vitess.yaml\n# create
  a single vttablet service\n# set tuple values to more recognizable variables\napiVersion:
  v1\nkind: Service\nmetadata:\n  name: vttablet\n  labels:\n    app: vitess\n  annotations:\n
  \   service.alpha.kubernetes.io/tolerate-unready-endpoints: \"true\"\nspec:\n  publishNotReadyAddresses:
  true\n  ports:\n    - port: 15002\n      name: web\n    - port: 16002\n      name:
  grpc\n\n  clusterIP: None\n  selector:\n    app: vitess\n    component: vttablet\n---\n#
  Source: vitess/templates/vitess.yaml\n# create one controller per cell\n# set tuple
  values to more recognizable variables# define image to use\n\n###################################\n#
  vtctld Service\n###################################\nkind: Service\napiVersion:
  v1\nmetadata:\n  name: vtctld\n  labels:\n    component: vtctld\n    app: vitess\nspec:\n
  \ ports:\n    - name: web\n      port: 15000\n    - name: grpc\n      port: 15999\n
  \ selector:\n    component: vtctld\n    app: vitess\n  type: ClusterIP\n---\n# Source:
  vitess/templates/vitess.yaml\n# create a pool of vtgates per cell\n# set tuple values
  to more recognizable variables# define image to use\n\n###################################\n#
  vtgate Service\n###################################\nkind: Service\napiVersion:
  v1\nmetadata:\n  name: vtgate-vitess-cluster-wp\n  labels:\n    component: vtgate\n
  \   cell: vitess-cluster-wp\n    app: vitess\nspec:\n  ports:\n    - name: web\n
  \     port: 15001\n    - name: grpc\n      port: 15991\n\n  selector:\n    component:
  vtgate\n    cell: vitess-cluster-wp\n    app: vitess\n  type: ClusterIP\n---\n#
  Source: vitess/templates/vitess.yaml\n###################################\n# vtctld
  Service + Deployment\n###################################\napiVersion: apps/v1\nkind:
  Deployment\nmetadata:\n  name: vtctld\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n
  \     app: vitess\n      component: vtctld\n  template:\n    metadata:\n      labels:\n
  \       app: vitess\n        component: vtctld\n    spec:\n      serviceAccountName:
  vtctld\n      securityContext:\n        runAsUser: 1000\n        fsGroup: 2000\n
  \     # set tuple values to more recognizable variables\n      containers:\n        -
  name: vtctld\n          image: vitess/vtctld:helm-2.0.2-0\n          imagePullPolicy:
  IfNotPresent\n          readinessProbe:\n            httpGet:\n              path:
  /debug/health\n              port: 15000\n            initialDelaySeconds: 30\n
  \           timeoutSeconds: 5\n          livenessProbe:\n            httpGet:\n
  \             path: /debug/status\n              port: 15000\n            initialDelaySeconds:
  30\n            timeoutSeconds: 5\n          env:\n            \n          volumeMounts:\n
  \           \n            \n          resources:\n            null\n          command:\n
  \           - bash\n            - \"-c\"\n            - |\n              set -ex;\n\n
  \             \n\n              eval exec /vt/bin/vtctld $(cat <<END_OF_COMMAND\n
  \               -cell=\"vitess-cluster-wp\"\n                -web_dir=\"/vt/web/vtctld\"\n
  \               -web_dir2=\"/vt/web/vtctld2/app\"\n                -workflow_manager_init\n
  \               -workflow_manager_use_election\n                -logtostderr=true\n
  \               -stderrthreshold=0\n                -port=15000\n                -grpc_port=15999\n
  \               -service_map=\"grpc-vtctl\"\n                -topo_global_root=/vitess/global\n
  \               -proxy_tablets=true\n                -topo_implementation=\"k8s\"\n
  \               -topo_global_server_address=\"k8s\"\n                \n                \n
  \                 \n                \n                \n                \n              END_OF_COMMAND\n
  \             )\n\n      volumes:\n---\n# Source: vitess/templates/vitess.yaml\n###################################\n#
  vtgate Deployment\n###################################\napiVersion: apps/v1\nkind:
  Deployment\nmetadata:\n  name: vtgate-vitess-cluster-wp\nspec:\n  replicas: 1\n
  \ selector:\n    matchLabels:\n      app: vitess\n      component: vtgate\n      cell:
  vitess-cluster-wp\n  template:\n    metadata:\n      labels:\n        app: vitess\n
  \       component: vtgate\n        cell: vitess-cluster-wp\n    spec:\n      serviceAccountName:
  vtgate\n      securityContext:\n        runAsUser: 1000\n        fsGroup: 2000\n
  \     # set tuple values to more recognizable variables\n      \n      # affinity
  pod spec\n      affinity:\n        \n      \n        podAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n
  \         # prefer to be scheduled with same-cell vttablets\n          - weight:
  10\n            podAffinityTerm:\n              topologyKey: kubernetes.io/hostname\n
  \             labelSelector:\n                matchLabels:\n                  app:
  \"vitess\"\n                  component: \"vttablet\"\n                  cell: \"vitess-cluster-wp\"\n
  \     \n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n
  \         # prefer to stay away from other same-cell vtgates\n          - weight:
  10\n            podAffinityTerm:\n              topologyKey: kubernetes.io/hostname\n
  \             labelSelector:\n                matchLabels:\n                  app:
  \"vitess\"\n                  component: \"vtgate\"\n                  cell: \"vitess-cluster-wp\"\n\n\n\n
  \     containers:\n        - name: vtgate\n          image: vitess/vtgate:helm-2.0.2-0\n
  \         imagePullPolicy: IfNotPresent\n          readinessProbe:\n            httpGet:\n
  \             path: /debug/health\n              port: 15001\n            initialDelaySeconds:
  30\n            timeoutSeconds: 5\n          livenessProbe:\n            httpGet:\n
  \             path: /debug/status\n              port: 15001\n            initialDelaySeconds:
  30\n            timeoutSeconds: 5\n          volumeMounts:\n            - name:
  creds\n              mountPath: \"/mysqlcreds\"\n            \n          resources:\n
  \           null\n\n          command:\n            - bash\n            - \"-c\"\n
  \           - |\n              set -ex\n\n              eval exec /vt/bin/vtgate
  $(cat <<END_OF_COMMAND\n                -topo_global_root=/vitess/global\n                -topo_implementation=\"k8s\"\n
  \               -topo_global_server_address=\"k8s\"\n                -logtostderr=true\n
  \               -stderrthreshold=0\n                -port=15001\n                -grpc_port=15991\n\n
  \               -service_map=\"grpc-vtgateservice\"\n                -cells_to_watch=\"vitess-cluster-wp\"\n
  \               -tablet_types_to_wait=\"MASTER,REPLICA\"\n                -gateway_implementation=\"discoverygateway\"\n
  \               -cell=\"vitess-cluster-wp\"\n                -mysql_server_version=\"5.7.9-Vitess\"\n
  \               \n              END_OF_COMMAND\n              )\n      volumes:\n
  \       - name: creds\n          emptyDir: {}\n---\n# Source: vitess/templates/vitess.yaml\n#
  Create global resources.\n---\n# Source: vitess/templates/vitess.yaml\n---\n\n\n\n\n\n\n#
  Create requested resources in each cell.\n"
name: vitess
namespace: default
version: 1
